<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[内部类]]></title>
    <url>%2F2018%2F07%2F16%2F%E5%86%85%E9%83%A8%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[#定义：在一个类的内部又定义了一个类，这就是内部类。#举例：12345678public class OuterClass &#123; private String outerName; private int outerAge; public class InnerClass&#123; private String innerName; private int innerAge; &#125; &#125; 内部类是一个编译时概念，编译后外部类及其内部类会生成两个独立的class文件： OuterClass.class和OuterClass$InnerClass.class内部类可以直接访问外部类的元素，但是外部类不可以直接访问内部类的元素 表现形式 静态内部类 关键字static可以修饰成员变量、方法、代码块，其实它还可以修饰内部类，使用static修饰的内部类我们称之为静态内部类。静态内部类与非静态内部类之间存在一个最大的区别，我们知道非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围内，但是静态内部类却没有。没有这个引用就意味着： 静态内部类的创建是不需要依赖于外围类，可以直接创建静态内部类不可以使用任何外围类的非static成员变量和方法，而内部类则都可以 成员内部类 成员内部类也是最普通的内部类，它是外部类的一个成员，所以他是可以无限制的访问外围类的所有成员属性和方法，尽管是private的，但是外围类要访问内部类的成员属性和方法则需要通过内部类实例来访问。 在成员内部类中要注意两点： 成员内部类中不能存在任何static的变量和方法成员内部类是依附于外围类的，所以只有先创建了外围类才能够创建内部类 局部内部类 有这样一种内部类，它是嵌套在方法和作用于内的，对于这个类的使用主要是应用与解决比较复杂的问题，想创建一个类来辅助我们的解决方案，到那时又不希望这个类是公共可用的，所以就产生了局部内部类，局部内部类和成员内部类一样被编译，只是它的作用域发生了改变，它只能在该方法和属性中被使用，出了该方法和属性就会失效。 匿名内部类 匿名内部类其实就是一个没有名字的方法内部类，所以它符合方法内部类的所有约束，初次之外，还有一些地方需要注意： 匿名内部类是没有访问修饰符的。匿名内部类必须继承一个抽象类或者实现一个接口匿名内部类中不能存在任何静态成员或方法匿名内部类是没有构造方法的，因为它没有类名。一般使用匿名内部类的场景是，要继承或实现的接口只有一个抽象方法，比如添加一个监听器 特点为什么要使用内部类？在《Think in java》中有这样一句话：使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。⒈ 内部类对象可以访问创建它的对象的实现，包括私有数据；⒉ 内部类不为同一包的其他类所见，具有很好的封装性；⒊ 使用内部类可以很方便的编写事件驱动程序；⒋ 匿名内部类可以方便的定义运行时回调；5.内部类可以方便的定义 匿名内部类匿名内部类的创建方式1234new 父类构造器（参数列表）|实现接口（） &#123; //匿名内部类的类体部分 &#125; 使用匿名内部类我们必须要继承一个父类或者实现一个接口,这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的1234567891011public class Anonymous &#123; //测试匿名内部类 public static void main(String[] args) &#123; Inner inner = new Inner() &#123; @Override public String getName() &#123; return "tom"; &#125; &#125;; System.out.println(inner.getName()); 在使用匿名内部类的过程中，我们需要注意如下几点： 使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。 匿名内部类中是不能定义构造函数的。 匿名内部类中不能存在任何的静态成员变量和静态方法。 匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。 匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java单例模式]]></title>
    <url>%2F2018%2F07%2F14%2Fjava%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单例模式概述 单例模式，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例 Java中单例模式定义：“一个类有且仅有一个实例，并且自行实例化向整个系统提供。” 单例模式三要素： 私有的构造方法； 指向自己实例的私有静态引用； 以自己实例为返回值的静态的公有方法。 单例模式实现 单例模式可以分为懒汉式和饿汉式： 懒汉式单例模式：在类加载时不初始化。饿汉式单例模式：在类加载时就完成了初始化，所以类加载比较慢，但获取对象的速度快。 第一种（懒汉，线程不安全） public class SingletonDemo { private static SingletonDemo instance; private SingletonDemo1(){} public static SingletonDemo1 getInstance(){ if (instance == null) { instance = new SingletonDemo1(); } return instance; } } 第二种（懒汉，线程安全）public class SingletonDemo { private static SingletonDemo instance; private SingletonDemo2(){} public static synchronized SingletonDemo2 getInstance(){ if (instance == null) { instance = new SingletonDemo2(); } return instance; } } 第三种（饿汉）public class SingletonDemo { private static SingletonDemo instance = new SingletonDemo3(); private SingletonDemo3(){} public static SingletonDemo3 getInstance(){ return instance; } } 单例模式优缺点 优点： 在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就 防止其它对象对自己的实例化，确保所有的对象都访问一个实例 单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。 提供了对唯一实例的受控访问。 由于在系统内存中只存在一个对象，因此可以 节约系统资源，当 需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。 允许可变数目的实例。 避免对共享资源的多重占用。 缺点 不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。 由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。 单例类的职责过重，在一定程度上违背了“单一职责原则”。 滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。使用场景由于单例模式具有以上优点，并且形式上比较简单，所以是日常开发中用的比较多的一种设计模式，其核心在于为整个系统提供一个唯一的实例，其应用场景包括但不仅限于以下几种： 有状态的工具类对象； 频繁访问数据库或文件的对象；我的cnds：https://blog.csdn.net/qq_38384971]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[text]]></title>
    <url>%2F2018%2F07%2F14%2Ftext%2F</url>
    <content type="text"><![CDATA[下载图片 点击下载 测试1测试2###测试3 ####测试4 public static void main(String[] args) { MyLinkList myLinkList = new MyLinkList(); for (int i = 0; i &lt; 100; i++) { myLinkList.add(i); } public static void main(String[] args) { MyLinkList myLinkList = new MyLinkList(); for (int i = 0; i &lt; 100; i++) { myLinkList.add(i);ll } 测试yLinkList.add(i); 测试 cs 测试 测试 测试测试测试 12345public static void main(String[] args) &#123; MyLinkList myLinkList = new MyLinkList(); for (int i = 0; i &lt; 100; i++) &#123; myLinkList.add(i); &#125; [] [title] [url] [link text]123456789101112#!/usr/bin/python# -*- coding: UTF-8 -*- # 定义函数def printme( str ): "打印任何传入的字符串" print str; return; # 调用函数printme("我要调用用户自定义函数!");printme("再次调用同一函数"); [] [title] [url] [link text]1234567var w=window.innerWidth|| document.documentElement.clientWidth|| document.body.clientWidth;var h=window.innerHeight|| document.documentElement.clientHeight|| document.body.clientHeight; [] [title] [url] [link text]12345678&lt;div id="bpn"&gt;&lt;ul class="prenext"&gt;&lt;li class="pre"&gt;&lt;a href="/js/js_obj_regexp.asp" title="JavaScript RegExp 对象"&gt;JS 正则表达式&lt;/a&gt;&lt;/li&gt;&lt;li class="next"&gt;&lt;a href="/js/js_window_screen.asp" title="JavaScript Window Screen"&gt;JS Screen&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; [lang:] [title] [url] [link text]1 2018/7/14 16:55:56]]></content>
  </entry>
  <entry>
    <title><![CDATA[链表的java实现]]></title>
    <url>%2F2018%2F07%2F13%2F%E9%93%BE%E8%A1%A8%E7%9A%84java%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[创建一个节点和一个对象 节点包含两个属性：数据，和指向连接对象实现添加和查询方法 ##创建节点1234567891011121314151617181920212223public class Node &#123; private int date; private Node next; public int getDate() &#123; return date; &#125; public void setDate(int date) &#123; this.date = date; &#125; public Node getNext() &#123; return next; &#125; public void setNext(Node next) &#123; this.next = next; &#125; &#125; ##创建对象1234567891011121314151617181920212223242526272829public class MyLinkList &#123; private Node head=new Node(); private Node tail=head; //定义存放数据方法 public void add(int num)&#123; //创建一个节点，将数据填充到节点，将尾部节点指向新创建的节点 Node node=new Node(); //将数据填充节点 node.setDate(num); tail.setNext(node); tail=node; &#125; //定义get方法 public int get(int index)&#123; Node target=head; for (int i = 0; i &lt; index+1; i++) &#123; target=target.getNext(); &#125; return target.getDate(); &#125; public static void main(String[] args) &#123; MyLinkList myLinkList = new MyLinkList(); for (int i = 0; i &lt; 100; i++) &#123; myLinkList.add(i); &#125; System.out.println(myLinkList.get(1)); &#125; &#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内部类]]></title>
    <url>%2F2018%2F07%2F01%2F%E6%96%B0%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[定义：在一个类的内部又定义了一个类，这就是内部类。举例： public class OuterClass { private String outerName; private int outerAge; public class InnerClass{ private String innerName; private int innerAge; } } 表现形式 静态内部类 成员内部类 局部内部类 匿名内部类特点为什么要使用内部类？在《Think in java》中有这样一句话：使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。⒈ 内部类对象可以访问创建它的对象的实现，包括私有数据；⒉ 内部类不为同一包的其他类所见，具有很好的封装性；⒊ 使用内部类可以很方便的编写事件驱动程序；⒋ 匿名内部类可以方便的定义运行时回调；5.内部类可以方便的定义]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
