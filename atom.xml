<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skyurb.cn/"/>
  <updated>2018-08-17T13:57:30.138Z</updated>
  <id>http://skyurb.cn/</id>
  
  <author>
    <name>skyurb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu开发环境搭建</title>
    <link href="http://skyurb.cn/2018/08/16/Ubuntu%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://skyurb.cn/2018/08/16/Ubuntu开发环境搭建/</id>
    <published>2018-08-16T13:19:02.000Z</published>
    <updated>2018-08-17T13:57:30.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>VMware Workstation Pro<br>下载地址：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a><br>激活码网上搜</li><li>ubuntu-18.04<br>下载地址：<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a><br>安装步骤略<h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2>ubuntu自带的有软件和更新，可以选择速度最快的源也可以自己手动配置<br>步骤：首先备份原来的更新源<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/apt/sources<span class="selector-class">.list</span> /etc/apt/sources<span class="selector-class">.list</span><span class="selector-class">.backup</span></span><br><span class="line"></span><br><span class="line">如果提示权限不够就输入下面两行，先进入到超级用户，再备份</span><br><span class="line">sudo -s</span><br><span class="line">cp /etc/apt/sources<span class="selector-class">.list</span> /etc/apt/sources<span class="selector-class">.list</span><span class="selector-class">.backup</span></span><br></pre></td></tr></table></figure></li></ul><p>执行命令打开source.list文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/apt/<span class="keyword">source</span>.<span class="keyword">list</span></span><br><span class="line">或者</span><br><span class="line">sudo gedit /etc/apt/<span class="keyword">source</span>.<span class="keyword">list</span></span><br></pre></td></tr></table></figure></p><p>把下面的内容复制到source.list中去，并覆盖原来的文件内容<br>以阿里的为例<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">deb</span> cdrom:[Ubuntu <span class="number">16.04</span> LTS _Xenial Xerus_ - Release amd64 (<span class="number">20160420.1</span>)]/ xenial main restricted</span><br><span class="line"><span class="keyword">deb</span>-src http://archive.ubuntu.<span class="keyword">com</span>/ubuntu xenial main restricted #Added by software-properties</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial main restricted</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial-updates main restricted</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial universe</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial-updates universe</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial multiverse</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial-updates multiverse</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line"><span class="keyword">deb</span> http://archive.canonical.<span class="keyword">com</span>/ubuntu xenial partner</span><br><span class="line"><span class="keyword">deb</span>-src http://archive.canonical.<span class="keyword">com</span>/ubuntu xenial partner</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial-security main restricted</span><br><span class="line"><span class="keyword">deb</span>-src http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial-security universe</span><br><span class="line"><span class="keyword">deb</span> http://mirrors.aliyun.<span class="keyword">com</span>/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure></p><p>让更新源生效<br><code>sudo apt-get update</code></p><h2 id="安装Java8"><a href="#安装Java8" class="headerlink" title="安装Java8"></a>安装Java8</h2><p>添加ppa<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:webupd8team/java</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><p>安装oracle-java-installer<br><code>sudo apt-get install oracle-java8-installer</code><br>设置系统默认jdk<br><code>sudo update-java-alternatives -s java-8-oracle</code><br>测试<br><code>java -version</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;VMware Workstation Pro&lt;br&gt;下载地址：&lt;a href=&quot;https://www.vmware.com/c
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://skyurb.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>java中数据转JSON的方式</title>
    <link href="http://skyurb.cn/2018/08/16/java%E4%B8%AD%E6%95%B0%E6%8D%AE%E8%BD%ACJSON%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://skyurb.cn/2018/08/16/java中数据转JSON的方式/</id>
    <published>2018-08-16T03:24:49.000Z</published>
    <updated>2018-08-16T03:58:18.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON 或JavaScript 对象表示法是一个轻量级的基于文本的开放标准</p><h2 id="JSON的用途"><a href="#JSON的用途" class="headerlink" title="JSON的用途"></a>JSON的用途</h2><p>使用基于JavaScript的应用程序，其中包括浏览器扩展和网站</p><p>使用JSON格式序列化和结构化的数据传输网络连接</p><p>这主要用于服务器和Web应用程序之间的数据传输</p><p>Web服务和API采用JSON格式提供公共数据</p><p>它可以用来与现代编程语言</p><h2 id="JSON的特点"><a href="#JSON的特点" class="headerlink" title="JSON的特点"></a>JSON的特点</h2><p>体积小，跨平台<br>易于读写JSON<br>轻量级的基于文本的交换格式</p><h2 id="JSON的格式"><a href="#JSON的格式" class="headerlink" title="JSON的格式"></a>JSON的格式</h2><p>名称/值对数据表示</p><p>大括号持有的对象和每个名称后跟“：”（冒号），名称/值对的分离，（逗号）。</p><p>方括号持有数组和值，（逗号）分隔。<br><a id="more"></a><br>举个例子：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"jack"</span>,</span><br><span class="line"><span class="attr">"password"</span>: <span class="string">"2561"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"rose"</span>,</span><br><span class="line"><span class="attr">"password"</span>: <span class="string">"123"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"贝吉塔"</span>,</span><br><span class="line"><span class="attr">"password"</span>: <span class="string">"26554"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><h1 id="java数据转JSON"><a href="#java数据转JSON" class="headerlink" title="java数据转JSON"></a>java数据转JSON</h1><p>json的第三方类库有很多：<code>fastjson,jackson,gson...</code><br>这里推荐使用gson：谷歌开发的java专用用来解析json的工具包</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在maven项目的pom文件中添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>不过在使用工具之前我们可以手动实现一下简单的转换<br>首先我们创建一个java实体类，通过对象来生成json格式<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后创建转换方法tojson<br>实现步骤：<br>定义泛型，通过反射获取字段和值，最后进行字符串拼接<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>&lt;T&gt; <span class="keyword">String</span> toJSON(T e) <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">      <span class="comment">//JSON格式&#123;"key":"value",key":"value"&#125;</span></span><br><span class="line">      <span class="comment">//定义stringbuiler拼接</span></span><br><span class="line">      StringBuilder json = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      json.<span class="built_in">append</span>(<span class="string">"&#123;"</span>);</span><br><span class="line">      <span class="comment">//获取类中的字段</span></span><br><span class="line">      Field[] fields = e.getClass().getDeclaredFields();</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">          <span class="comment">//遍历字段获取字段名</span></span><br><span class="line">          <span class="keyword">String</span> filed = fields[i].getName();</span><br><span class="line">          <span class="comment">//拼接字段的get方法名</span></span><br><span class="line">          <span class="keyword">String</span> methodName=<span class="string">"get"</span>+filed.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+filed.substring(<span class="number">1</span>);</span><br><span class="line">          <span class="comment">//通过方法名获取get方法对象</span></span><br><span class="line">          Method method = e.getClass().getDeclaredMethod(methodName);</span><br><span class="line">          <span class="comment">//调用get方法并调用对象</span></span><br><span class="line">          <span class="keyword">Object</span> filedvalue = method.invoke(e);</span><br><span class="line">          json.<span class="built_in">append</span>(<span class="string">"\""</span>).<span class="built_in">append</span>(filed).<span class="built_in">append</span>(<span class="string">"\":\""</span>).<span class="built_in">append</span>(filedvalue).<span class="built_in">append</span>(<span class="string">"\""</span>);</span><br><span class="line">          <span class="keyword">if</span> (i==fields.length<span class="number">-1</span>)&#123;</span><br><span class="line">              json.<span class="built_in">append</span>(<span class="string">"&#125;"</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              json.<span class="built_in">append</span>(<span class="string">","</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> json.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">       User jack = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"jack"</span>, <span class="string">"2561"</span>);</span><br><span class="line">       <span class="keyword">String</span> s=toJSON(jack);</span><br><span class="line">       System.out.<span class="built_in">println</span>(s);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//结果</span></span><br><span class="line">   &#123;<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"name"</span>:<span class="string">"jack"</span>,<span class="string">"password"</span>:<span class="string">"2561"</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用工具类"><a href="#使用工具类" class="headerlink" title="使用工具类"></a>使用工具类</h2><p>Gson的两个基础方法：<code>toJson();</code>：<code>fromJson();</code></p><ul><li>toJson 将bean对象转换为json字符串</li><li>fromJson 将json字符串转为bean对象<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用new方法</span></span><br><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line"><span class="comment">// toJson 将bean对象转换为json字符串</span></span><br><span class="line"><span class="built_in">String</span> jsonStr = gson.toJson(user, User.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fromJson 将json字符串转为bean对象</span></span><br><span class="line">Student user= gson.fromJson(jsonStr, User.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// **序列化List**</span></span><br><span class="line"><span class="built_in">String</span> jsonStr2 = gson.toJson(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// **反序列化成List时需要使用到TypeToken getType()**</span></span><br><span class="line"><span class="built_in">List</span>&lt;User&gt; retList = gson.fromJson(jsonStr2,<span class="keyword">new</span> TypeToken&lt;<span class="built_in">List</span>&lt;User&gt;&gt;()&#123;&#125;.getType());</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h1&gt;&lt;p&gt;JSON 或JavaScript 对象表示法是一个轻量级的基于文本的开放标准&lt;/p&gt;
&lt;h2 id=&quot;JSON的用途&quot;&gt;&lt;a href=&quot;#JSON的用途&quot; class=&quot;headerlink&quot; title=&quot;JSON的用途&quot;&gt;&lt;/a&gt;JSON的用途&lt;/h2&gt;&lt;p&gt;使用基于JavaScript的应用程序，其中包括浏览器扩展和网站&lt;/p&gt;
&lt;p&gt;使用JSON格式序列化和结构化的数据传输网络连接&lt;/p&gt;
&lt;p&gt;这主要用于服务器和Web应用程序之间的数据传输&lt;/p&gt;
&lt;p&gt;Web服务和API采用JSON格式提供公共数据&lt;/p&gt;
&lt;p&gt;它可以用来与现代编程语言&lt;/p&gt;
&lt;h2 id=&quot;JSON的特点&quot;&gt;&lt;a href=&quot;#JSON的特点&quot; class=&quot;headerlink&quot; title=&quot;JSON的特点&quot;&gt;&lt;/a&gt;JSON的特点&lt;/h2&gt;&lt;p&gt;体积小，跨平台&lt;br&gt;易于读写JSON&lt;br&gt;轻量级的基于文本的交换格式&lt;/p&gt;
&lt;h2 id=&quot;JSON的格式&quot;&gt;&lt;a href=&quot;#JSON的格式&quot; class=&quot;headerlink&quot; title=&quot;JSON的格式&quot;&gt;&lt;/a&gt;JSON的格式&lt;/h2&gt;&lt;p&gt;名称/值对数据表示&lt;/p&gt;
&lt;p&gt;大括号持有的对象和每个名称后跟“：”（冒号），名称/值对的分离，（逗号）。&lt;/p&gt;
&lt;p&gt;方括号持有数组和值，（逗号）分隔。&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://skyurb.cn/categories/JAVA/"/>
    
    
      <category term="JSON" scheme="http://skyurb.cn/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>java使用日志</title>
    <link href="http://skyurb.cn/2018/08/14/java%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/"/>
    <id>http://skyurb.cn/2018/08/14/java使用日志/</id>
    <published>2018-08-14T11:57:11.000Z</published>
    <updated>2018-08-15T01:42:04.883Z</updated>
    
    <content type="html"><![CDATA[<p>软件的运行过程离不开日志.日志主要用来记录系统运行过程中的一些重要的操作信息,便于监视系统运行情况,帮助用户提前发现和避开可能出现的问题,或者出现问题后根据日志找到发生的原因.</p><h2 id="slf4j"><a href="#slf4j" class="headerlink" title="slf4j"></a>slf4j</h2><p>slf4j的全称是Simple Loging Facade For Java，即它仅仅是一个为Java程序提供日志输出的统一接口，并不是一个具体的日志实现方案，就比如JDBC一样，只是一种规则而已。所以单独的slf4j是不能工作的，必须搭配其他具体的日志实现方案，比如apache的org.apache.log4j.Logger，jdk自带的java.util.logging.Logger等等<br>好处是在不修改源代码的情况下可以更换，或者兼容不同的日志框架<br>web项目需要将其运行情况记录到文本文件中，方便查看</p><h2 id="在maven项目中添加依赖"><a href="#在maven项目中添加依赖" class="headerlink" title="在maven项目中添加依赖"></a>在maven项目中添加依赖</h2><p>添加两个架包，将如下的配置文件添加到pom中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="创建log4-properties文件"><a href="#创建log4-properties文件" class="headerlink" title="创建log4.properties文件"></a>创建log4.properties文件</h2><p>使用log4j需要创建log4j.propterties文件,这个文件时专门用来配置日志信息的,比如输出级别、输出目的地、输出格式等.<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Configure logging for testing: optionally with log file</span></span><br><span class="line"><span class="meta">#rootLogger表示要记录日志种类，中间以，分割</span></span><br><span class="line"><span class="meta">#日志种类默认有以下几种：</span></span><br><span class="line"><span class="meta">#DEBUG：调试</span></span><br><span class="line"><span class="meta">#INFO：用来输入一般信息</span></span><br><span class="line"><span class="meta">#WARN：警告信息</span></span><br><span class="line"><span class="meta">#ERROR：错误信息</span></span><br><span class="line">log4j.rootLogger=INFO, <span class="keyword">stdout</span></span><br><span class="line"><span class="meta"># log4j.rootLogger=WARN, stdout, logfile</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#用于自定义的日志配置</span></span><br><span class="line"><span class="meta">#ConsoleAppender表示日志会打印在控制台</span></span><br><span class="line">log4j.appender.<span class="keyword">stdout</span>=org.apache.log4j.ConsoleAppender</span><br><span class="line"><span class="meta">#layout表示日志输出样式</span></span><br><span class="line">log4j.appender.<span class="keyword">stdout</span>.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.<span class="keyword">stdout</span>.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line"></span><br><span class="line"><span class="meta">#FileAppender表示日志输出到文件</span></span><br><span class="line">log4j.appender.logfile=org.apache.log4j.FileAppender</span><br><span class="line"><span class="meta">#File表示日志会输出到那个文件</span></span><br><span class="line">log4j.appender.logfile.File=target/spring.log</span><br><span class="line">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</span><br></pre></td></tr></table></figure></p><p>Appender 为日志输出目的地，Log4j提供的appender有以下几种：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.ConsoleAppender</span>（控制台），</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.FileAppender</span>（文件），</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.DailyRollingFileAppender</span>（每天产生一个日志文件），</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.RollingFileAppender</span>（文件大小到达指定尺寸的时候产生一个新的文件），</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.WriterAppender</span>（将日志信息以流格式发送到任意指定的地方）</span><br></pre></td></tr></table></figure></p><p>Layout：日志输出格式，Log4j提供的layout有以下几种：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.HTMLLayout</span>（以HTML表格形式布局），</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.PatternLayout</span>（可以灵活地指定布局模式），</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.SimpleLayout</span>（包含日志信息的级别和信息字符串），</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.TTCCLayout</span>（包含日志产生的时间、线程、类别等等信息）</span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在servlet打印出请求方法和地址，也可以输出到指定文件中<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WebLog4j</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> static <span class="type">Logger</span> log=<span class="type">LoggerFactory</span>.getLogger(<span class="type">WebLog4j</span>.<span class="keyword">class</span>);</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">       log.info(<span class="string">"method &#123;&#125;"</span>,req.getMethod());</span><br><span class="line">       log.info(<span class="string">"requestURL &#123;&#125;"</span>,req.getRequestURL());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="日志信息格式中几个符号所代表的含义"><a href="#日志信息格式中几个符号所代表的含义" class="headerlink" title="日志信息格式中几个符号所代表的含义"></a>日志信息格式中几个符号所代表的含义</h2><p> -X号: X信息输出时左对齐；</p><pre><code>%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921%r: 输出自应用启动到输出该log信息耗费的毫秒数%c: 输出日志信息所属的类目，通常就是所在类的全名%t: 输出产生该日志事件的线程名%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。%%: 输出一个&quot;%&quot;字符%F: 输出日志消息产生时所在的文件名称%L: 输出代码中的行号%m: 输出代码中指定的消息,产生的日志具体信息%n: 输出一个回车换行符，Windows平台为&quot;/r/n&quot;，Unix平台为&quot;/n&quot;输出日志信息换行    </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件的运行过程离不开日志.日志主要用来记录系统运行过程中的一些重要的操作信息,便于监视系统运行情况,帮助用户提前发现和避开可能出现的问题,或者出现问题后根据日志找到发生的原因.&lt;/p&gt;
&lt;h2 id=&quot;slf4j&quot;&gt;&lt;a href=&quot;#slf4j&quot; class=&quot;headerlink&quot; title=&quot;slf4j&quot;&gt;&lt;/a&gt;slf4j&lt;/h2&gt;&lt;p&gt;slf4j的全称是Simple Loging Facade For Java，即它仅仅是一个为Java程序提供日志输出的统一接口，并不是一个具体的日志实现方案，就比如JDBC一样，只是一种规则而已。所以单独的slf4j是不能工作的，必须搭配其他具体的日志实现方案，比如apache的org.apache.log4j.Logger，jdk自带的java.util.logging.Logger等等&lt;br&gt;好处是在不修改源代码的情况下可以更换，或者兼容不同的日志框架&lt;br&gt;web项目需要将其运行情况记录到文本文件中，方便查看&lt;/p&gt;
&lt;h2 id=&quot;在maven项目中添加依赖&quot;&gt;&lt;a href=&quot;#在maven项目中添加依赖&quot; class=&quot;headerlink&quot; title=&quot;在maven项目中添加依赖&quot;&gt;&lt;/a&gt;在maven项目中添加依赖&lt;/h2&gt;&lt;p&gt;添加两个架包，将如下的配置文件添加到pom中&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.slf4j&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;slf4j-log4j12&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.7.25&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.slf4j&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;slf4j-api&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.7.25&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://skyurb.cn/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://skyurb.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>mysql基础</title>
    <link href="http://skyurb.cn/2018/08/11/mysql%E5%9F%BA%E7%A1%80/"/>
    <id>http://skyurb.cn/2018/08/11/mysql基础/</id>
    <published>2018-08-11T03:02:10.000Z</published>
    <updated>2018-08-11T04:45:55.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h1><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，<br>每个数据库都有一个或多个不同的API用于创建，访问，管理，搜索和复制所保存的数据。<br>RDBMS即关系数据库管理系统(Relational Database Management System)的特点：</p><ul><li>数据以表格的形式出现</li><li>每行为各种记录名称</li><li>每列为记录名称所对应的数据域</li><li>许多的行和列组成一张表单</li><li>若干的表单组成database<a id="more"></a><h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3>（英语：Relational database），是创建在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。关系模型是由埃德加·科德于1970年首先提出的，并配合“科德十二定律”。现如今虽然对此模型有一些批评意见，但它还是数据存储的传统标准。标准数据查询语言SQL就是一种基于关系数据库的语言，这种语言执行对关系数据库中数据的检索和操作</li><li>MySQL</li><li>MariaDB（MySQL的代替品，英文维基百科从MySQL转向MariaDB）</li><li>Percona Server（MySQL的代替品）</li><li>PostgreSQL</li><li>Microsoft Access</li><li>SQL Server</li><li>Oracle<h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3>NoSQL一词最早出现于1998年，是Carlo Strozzi开发的一个轻量、开源、不提供SQL功能的关系数据库。当代典型的关系数据库在一些数据敏感的应用中表现了糟糕的性能，例如为巨量文档创建索引、高流量网站的网页服务，以及发送流式媒体。关系型数据库的典型实现主要被调整用于执行规模小而读写频繁，或者大批量极少写访问的事务。<br>常用的：<br>Key/value最终一致性存储<br>Apache Cassandra（为Facebook所使用）：高度可扩展<br>Key/value RAM存储<br>Redis<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。<h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3>下载mysql：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener"> http://dev.mysql.com/downloads/mysql/ </a><br>安装时，MySQL会提示输入root用户的口令，请务必记清楚。如果怕记不住，就把口令设置为password。<br>在Windows上，安装时请选择UTF-8编码，以便正确地处理中文<br>连接：mysql管理人默认为root，没有设置密码则直接登录<br>mysql -h host -u root  -p 输入密码按回车进入<br>修改密码：<code>update user set password=password(”2512″) where user=’root’;</code><h1 id="mysql操作"><a href="#mysql操作" class="headerlink" title="mysql操作"></a>mysql操作</h1>基础操作分为两部分，数据库和表的创建，数据库和表的操作<h2 id="数据库和表的创建"><a href="#数据库和表的创建" class="headerlink" title="数据库和表的创建"></a>数据库和表的创建</h2>1.显示数据库<br><code>SHOW DATABASES;</code><br>2.创建数据库<br><code>CREATE DATABASE 数据库名称;</code><br>3.打开数据库<br><code>use 数据库名称;</code><br>每次使用数据库必须打开相应数据库<br>4.显示当前使用的数据库中所有表<br><code>SHOW TABLES;</code><br>5.创建数据表<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create <span class="keyword">table</span> 表名(</span><br><span class="line"></span><br><span class="line">   列名  类型  是否可以为空，</span><br><span class="line"></span><br><span class="line">   列名  类型  是否可以为空</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>6.示表mysql数据库中user表的列信息<br><code>desc 表名;</code><br>7.删除数据表<br><code>drop table 表名</code><br>8.清空表<br><code>delete from 表名</code></p><h2 id="数据库和表内容的操作-增、删、改、查"><a href="#数据库和表内容的操作-增、删、改、查" class="headerlink" title="数据库和表内容的操作(增、删、改、查)"></a>数据库和表内容的操作(增、删、改、查)</h2><p>数据库主要操作</p><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>关键字：insert into<br>向数据库添加一行值<br><code>insert into 表 (列名,列名...) values(值,值,值...)；</code><br>向数据库添加一行值<br><code>insert into 表 (列名,列名...) values(值,值,值...),(值,值,值...)；</code><br>如果向表中的每个字段都插入一个值,那么前面括号内字段名可写也可不写<br><code>insert into 表 values(值,值,值...),(值,值,值...)</code></p><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>关键字：delect<br>删除整个表中的信息<br><code>delete from table_name;</code><br>删除表中指定条件的语句<br><code>delete from table_name where 条件语句 ; 条件语句如 : id=3;</code></p><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>关键字：update<br>更新指定数据 , 更新某一个字段的数据<br><code>Update table_name set 字段名=’新值’ ;</code></p><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>关键字：select</p><ul><li>普通查询<br><code>select * from 表;</code><br><code>select * from 表 where 条件语句;</code></li><li>通配符(模糊查询 like)<br>ale开头的所有（多个字符串）<br><code>select * from 表 where name like &#39;ale%&#39;</code><br>ale开头的所有（一个字符)<br><code>select * from 表 where name like &#39;ale_&#39;</code></li><li>排序（order by）<br>根据 “列” 从小到大排列<br><code>select * from 表 order by 列 asc</code><br>根据 “列” 从大到小排列<br><code>select * from 表 order by 列 desc</code><br>列1” 从大到小排列，如果相同则按列2从小到大排序<br><code>select * from 表 order by 列1 desc,列2 asc</code></li><li>分组（group by）<br><code>select count(*) from 表 group by 字段</code><br><code>select count(*) from 表 group by 字段 having 条件语句</code><br>当group by 与聚合函数配合使用时，功能为分组后计算<br>having:作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚组函数，使用having 条件显示特定的组，也可以使用多个分组标准进行分组<br>当group by 与having配合使用时，功能为分组后过滤<h2 id="MySQL的一些函数"><a href="#MySQL的一些函数" class="headerlink" title="MySQL的一些函数"></a>MySQL的一些函数</h2>1、字符串链接——CONCAT()<br>　　<code>SELECT CONCAT(name,&#39;=&gt;&#39;,score) FROM tb_name</code>　<br>2、数学函数：<br>  <code>AVG、SUM、MAX、MIN、COUNT；</code><br>3、文本处理函数：<br>  <code>TRIM、LOCATE、UPPER、LOWER、SUBSTRING</code><br>4、运算符：<br>   <code>+、-、*、\</code><br>5、时间函数：<br><code>DATE()、CURTIME()、DAY()、YEAR()、NOW()…..</code><h2 id="表结构修改"><a href="#表结构修改" class="headerlink" title="表结构修改"></a>表结构修改</h2>1.增加一个字段　<br><code>alter table table_name add column (字段名 字段类型); ----此方法带括号</code>　　<br>2.指定字段插入的位置<br><code>alter table table_name add column 字段名 字段类型 after 某字段；</code><br>3.修改字段名称/类型<br><code>alter table table_name change 旧字段名 新字段名 新字段的类型;</code><br>4.改表的名字<br><code>alter table table_name rename to new_table_name;</code><h2 id="增加主键，外键，约束，索引"><a href="#增加主键，外键，约束，索引" class="headerlink" title="增加主键，外键，约束，索引"></a>增加主键，外键，约束，索引</h2>1.添加主键<br><code>ALTER TABLE person ADD PRIMARY KEY (id);</code><br>2.删除主键<br><code>ALTER TABLE person DROP PRIMARY KEY;</code><br>3.添加唯一索引<br><code>ALTER TABLE person ADD UNIQUE name_unique_index (</code>name<code>);</code><br>为name这一列创建了唯一索引,索引的名字是name_unique_index.<br>4.添加普通索引<br><code>ALTER TABLE person ADD INDEX birthday_index (</code>birthday<code>);</code><br>5.删除索引<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">DROP</span> <span class="keyword">INDEX</span> birthday_index;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">DROP</span> <span class="keyword">INDEX</span> name_unique_index;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库概述&quot;&gt;&lt;a href=&quot;#数据库概述&quot; class=&quot;headerlink&quot; title=&quot;数据库概述&quot;&gt;&lt;/a&gt;数据库概述&lt;/h1&gt;&lt;p&gt;数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，&lt;br&gt;每个数据库都有一个或多个不同的API用于创建，访问，管理，搜索和复制所保存的数据。&lt;br&gt;RDBMS即关系数据库管理系统(Relational Database Management System)的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据以表格的形式出现&lt;/li&gt;
&lt;li&gt;每行为各种记录名称&lt;/li&gt;
&lt;li&gt;每列为记录名称所对应的数据域&lt;/li&gt;
&lt;li&gt;许多的行和列组成一张表单&lt;/li&gt;
&lt;li&gt;若干的表单组成database
    
    </summary>
    
      <category term="MYSQL" scheme="http://skyurb.cn/categories/MYSQL/"/>
    
    
      <category term="mysql" scheme="http://skyurb.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="http://skyurb.cn/2018/08/11/%E5%8F%8D%E5%B0%84/"/>
    <id>http://skyurb.cn/2018/08/11/反射/</id>
    <published>2018-08-11T01:13:56.000Z</published>
    <updated>2018-08-11T04:51:38.544Z</updated>
    
    <content type="html"><![CDATA[<p><strong>反射是框架设计的灵魂</strong></p><blockquote><p>想理解反射的原理，首先要了解什么是类型信息。Java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI，它假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们在运行时发现和使用类的信息</p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。<br>要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.<br>总结：反射就是把java类中的各种成分映射成一个个的Java对象</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>在运行时构造任意一个类的对象<br>在运行时获取任意一个类所具有的成员变量和方法<br>在运行时调用任意一个对象的方法（属性）<br>生成动态代理<br><a id="more"></a></p><h2 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h2><ul><li>Class是一个类，封装了当前对象所对应的类的信息</li><li>Class 是一个类; 一个描述类的类.封装了描述方法的 Method,描述字段的 Filed,描述构造器的 Constructor 等属性</li><li>对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个类的有关信息</li><li>Class 对象只能由系统建立对象，一个类（而不是一个对象）在 JVM 中只会有一个Class实例</li></ul><h2 id="获取Class对象的三种方式"><a href="#获取Class对象的三种方式" class="headerlink" title="获取Class对象的三种方式"></a>获取Class对象的三种方式</h2><p>比如先建一个Person类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.skyurb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String id, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><p>通过类名获取  类名.class</p></li><li><p>通过对象获取 对象名.getClass()</p></li><li><p>通过全类名获取    Class.forName(全类名)</p></li></ol><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.通过类名.class获取 类</span></span><br><span class="line">   <span class="keyword">Class</span> clazz = Person.<span class="keyword">class</span><span class="comment">;</span></span><br><span class="line">   <span class="comment">//2.通过对象getclass也可以获取对象所属类</span></span><br><span class="line">   Person tom = <span class="keyword">new</span> Person(<span class="string">"tom"</span>, <span class="number">5</span>)<span class="comment">;</span></span><br><span class="line">   <span class="keyword">Class</span>&lt;? <span class="keyword">extends</span> Person&gt; clazz1 = tom.getClass()<span class="comment">;</span></span><br><span class="line">   <span class="comment">//3.通过Class的静态方法获取</span></span><br><span class="line">   <span class="keyword">Class</span>&lt;?&gt; clazz3 = <span class="keyword">Class</span>.forName(<span class="string">"com.skyurb.Person"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="class类常用方法"><a href="#class类常用方法" class="headerlink" title="class类常用方法"></a>class类常用方法</h2><p>我们可以通过反射来获取类的信息</p><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>static Class forName(String name)</td><td>返回指定类名 name 的 Class 对象</td></tr><tr><td>Object newInstance()</td><td>调用缺省构造函数，返回该Class对象的一个实例</td></tr><tr><td>getName()</td><td>返回此Class对象所表示的实体（类、接口、数组类、基本类型或void）名称</td></tr><tr><td>Class getSuperClass()</td><td>返回当前Class对象的父类的Class对象</td></tr><tr><td>Class [] getInterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>返回该类的类加载器</td></tr><tr><td>Class getSuperclass()</td><td>返回该类的类加载器</td></tr></tbody></table><p>实例：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span>&lt;Person&gt; clazz = Person.<span class="keyword">class</span>;</span><br><span class="line">     <span class="comment">//结果：com.skyurb.Person</span></span><br><span class="line">     System.<span class="keyword">out</span>.println(clazz.getName());</span><br><span class="line">     <span class="comment">//利用Class对象的newInstance方法创建一个类的实例</span></span><br><span class="line">     Person person = clazz.newInstance();</span><br><span class="line">     System.<span class="keyword">out</span>.println(person);</span><br><span class="line">     <span class="comment">//结果：com.skyurb.Person@14ae5a5</span></span><br></pre></td></tr></table></figure></p><p>可以看出确实是创建了一个Person实例<br>但是Person类有两个构造方法，到底是调用的哪一个构造方法呢<br>实际调用的是类的无参数的构造器。所以在我们在定义一个类的时候，定义一个有参数的构造器，作用是对属性进行初始化，还要写一个无参数的构造器，作用就是反射时候用。<br>一般地、一个类若声明一个带参的构造器，同时要声明一个无参数的构造器<br>创建带参的实例<br>这时要通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建实例。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建带参的对象</span></span><br><span class="line">      <span class="function"><span class="keyword">Constructor</span>&lt;<span class="title">Person</span>&gt; <span class="title">constructor</span> = <span class="title">clazz</span>.<span class="title">getConstructor</span><span class="params">(<span class="keyword">String</span>.<span class="keyword">class</span>, int.<span class="keyword">class</span>)</span>;</span></span><br><span class="line">      Person person1 = <span class="function"><span class="keyword">constructor</span>.<span class="title">newInstance</span><span class="params">("小明", 15)</span>;</span></span><br></pre></td></tr></table></figure></p><h2 id="反射方式获取字段-成员变量"><a href="#反射方式获取字段-成员变量" class="headerlink" title="反射方式获取字段(成员变量)"></a>反射方式获取字段(成员变量)</h2><p>主要是这几个方法：</p><ul><li>getFields: 访问公有的成员变量</li><li>getDeclaredFields：所有已声明的成员变量。但不能得到其父类的成员变量<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">      <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">          <span class="keyword">System</span>.out.println(f.<span class="built_in">getName</span>());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//结果id age</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="反射方式获取方法"><a href="#反射方式获取方法" class="headerlink" title="反射方式获取方法"></a>反射方式获取方法</h2><p>获取某个Class对象的方法集合，主要有以下几个方法： </p><ul><li>getDeclaredMethods() 方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。 </li><li>getMethods() 方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。 </li><li>getMethod方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象</li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Method</span>[] <span class="title">methods</span> = <span class="title">clazz</span>.<span class="title">getDeclaredMethods</span><span class="params">()</span>;</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="function"><span class="keyword">Method</span> <span class="title">m</span> :</span></span><br><span class="line">               methods) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">            //获取返回值类型</span></span><br><span class="line"><span class="comment">           m.getReturnType();</span></span><br><span class="line"><span class="comment">           System.out.println(m.getName());</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line">       <span class="comment">//结果getId</span></span><br><span class="line">       <span class="comment">//getAge</span></span><br><span class="line">       <span class="comment">//setAge</span></span><br><span class="line">       <span class="comment">//setId</span></span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>例如我们通过反射来设置id属性<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person<span class="built_in"> instance </span>= (Person) clazz.newInstance();</span><br><span class="line">Method setId = clazz.getMethod(<span class="string">"setId"</span>, String.class);</span><br><span class="line">//调用setid方法，第一个class表示方法所属对象  第二个object表示方法参数</span><br><span class="line">setId.invoke(person,<span class="string">"jack"</span>);</span><br></pre></td></tr></table></figure></p><p>clazz.getMethod(methodName, argsClass)：通过methodName和参数的argsClass（方法中的参数类型集合）数组得到要执行的Method。<br><code>method.invoke(owner, args)</code>执行该Method.invoke方法的参数是执行这个方法的对象owner，和参数数组args<br>可以这么理解：owner对象中带有参数args的method方法。返回值是Object，也既是该方法的返回值</p><h2 id="通过反射越过泛型检查"><a href="#通过反射越过泛型检查" class="headerlink" title="通过反射越过泛型检查"></a>通过反射越过泛型检查</h2><p>泛型用在编译期，编译过后泛型擦除（消失掉）。所以是可以通过反射越过泛型检查的<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">ArrayList&lt;<span class="keyword">String</span>&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">strList.<span class="built_in">add</span>(<span class="string">"aaa"</span>);</span><br><span class="line">strList.<span class="built_in">add</span>(<span class="string">"bbb"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//strList.add(100);</span></span><br><span class="line"><span class="comment">//获取ArrayList的Class对象，反向的调用add()方法，添加数据</span></span><br><span class="line">Class listClass = strList.getClass(); <span class="comment">//得到 strList 对象的字节码 对象</span></span><br><span class="line"><span class="comment">//获取add()方法</span></span><br><span class="line">Method m = listClass.getMethod(<span class="string">"add"</span>, <span class="keyword">Object</span>.class);</span><br><span class="line"><span class="comment">//调用add()方法</span></span><br><span class="line">m.invoke(strList, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">Object</span> obj : strList)&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>参考自：</em><a href="https://www.cnblogs.com/tech-bird/p/3525336.html" target="_blank" rel="noopener">https://www.cnblogs.com/tech-bird/p/3525336.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;反射是框架设计的灵魂&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;想理解反射的原理，首先要了解什么是类型信息。Java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI，它假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们在运行时发现和使用类的信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。&lt;br&gt;要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.&lt;br&gt;总结：反射就是把java类中的各种成分映射成一个个的Java对象&lt;/p&gt;
&lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h2&gt;&lt;p&gt;在运行时构造任意一个类的对象&lt;br&gt;在运行时获取任意一个类所具有的成员变量和方法&lt;br&gt;在运行时调用任意一个对象的方法（属性）&lt;br&gt;生成动态代理&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://skyurb.cn/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://skyurb.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>git学习二</title>
    <link href="http://skyurb.cn/2018/08/04/git%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>http://skyurb.cn/2018/08/04/git学习二/</id>
    <published>2018-08-04T09:14:10.000Z</published>
    <updated>2018-08-06T14:18:14.371Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/c3a6dd62gy1ftnh7wdvmtj20cn05ajre.jpg" alt=""></p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p>首先，我们来创建dev分支，然后切换到dev分支上<br><code>git checkout -b dev</code><br>git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令<br><code>git branch dev</code><br><code>git checkout dev</code><br>查看当前分支<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> git <span class="keyword">branch</span></span><br><span class="line"><span class="keyword">* </span>dev</span><br><span class="line"><span class="symbol">master</span></span><br></pre></td></tr></table></figure></p><p>git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在read.txt再增加一行good,添加后并提交<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">cat</span> <span class="keyword">read</span>.txt</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">good</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>现在我们切换到主分支master上，继续查看read.txt内容<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> <span class="keyword">read</span>.txt</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure></p><p>发现good没有了<br>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 <code>git merge dev</code><br>git merge命令用于合并指定分支到当前分支上，合并后，再查看read.txt内容，可以看到，和dev分支最新提交的是完全一样的。<br>意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。<br>合并完成后，我们可以接着删除dev分支了，操作如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-d dev</span><br><span class="line"><span class="symbol">Deleted</span> <span class="keyword">branch </span>dev (was <span class="number">8</span>df4ce8).</span><br></pre></td></tr></table></figure></p><p><strong>总结创建与合并分支命令</strong></p><blockquote><p>查看分支：git branch</p></blockquote><blockquote><p>创建分支：git branch name</p></blockquote><blockquote><p>切换分支：git checkout name</p></blockquote><blockquote><p>创建+切换分支：git checkout –b name</p></blockquote><blockquote><p>合并某分支到当前分支：git merge name</p></blockquote><blockquote><p>删除分支：git branch –d name</p></blockquote><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>先新建一个新分支，比如名字叫fenzhi1，在read.txt添加一行内容byby，然后提交<br>我们现在切换到master分支上来，也在最后一行添加内容，内容为byby<br>现在我们需要在master分支上来合并fenzhi1：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">merge</span> fenzhi1</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">Auto-merging <span class="built_in">read</span>.txt</span><br><span class="line"> (content): Merge conflict <span class="keyword">in</span> <span class="built_in">read</span>.txt</span><br><span class="line">Automatic <span class="built_in">merge</span> failed; fix conflicts <span class="keyword">and</span> <span class="keyword">then</span> commit <span class="keyword">the</span> <span class="built_in">result</span>.</span><br></pre></td></tr></table></figure></p><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;&lt;HEAD是指主分支修改的内容，&gt;&gt;&gt;&gt;&gt;fenzhi1 是指fenzhi1上修改的内容<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="code"> cat read.txt</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">hello world;</span><br><span class="line">baby</span><br><span class="line">=======</span><br><span class="line">hello word</span><br><span class="line">hahhaha</span><br><span class="line">i am jack</span><br><span class="line">let's go;</span><br><span class="line">babay</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; fenzhi1</span><br></pre></td></tr></table></figure></p><p>我们可以修改下和主干一样后保存。</p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：</p><ul><li>创建一个dev分支。</li><li>修改readme.txt内容。</li><li>添加到暂存区。</li><li>切换回主分支(master)。</li><li>合并dev分支，使用命令 git merge –no-ff  -m “注释” dev</li><li>查看历史记录</li></ul><p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/c3a6dd62gy1ftnh7wdvmtj20cn05ajre.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;分支管理&quot;&gt;&lt;a href=&quot;#分支管理&quot; class=&quot;headerlink&quot; title=&quot;分支管理&quot;&gt;&lt;/a&gt;分支管理&lt;/h1&gt;&lt;p&gt;在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。&lt;/p&gt;
&lt;h2 id=&quot;创建与合并分支&quot;&gt;&lt;a href=&quot;#创建与合并分支&quot; class=&quot;headerlink&quot; title=&quot;创建与合并分支&quot;&gt;&lt;/a&gt;创建与合并分支&lt;/h2&gt;&lt;p&gt;首先，我们来创建dev分支，然后切换到dev分支上&lt;br&gt;&lt;code&gt;git checkout -b dev&lt;/code&gt;&lt;br&gt;git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令&lt;br&gt;&lt;code&gt;git branch dev&lt;/code&gt;&lt;br&gt;&lt;code&gt;git checkout dev&lt;/code&gt;&lt;br&gt;查看当前分支&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; git &lt;span class=&quot;keyword&quot;&gt;branch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;* &lt;/span&gt;dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在read.txt再增加一行good,添加后并提交&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt;.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;good&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://skyurb.cn/categories/Git/"/>
    
    
      <category term="git" scheme="http://skyurb.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>java基础笔记整理一</title>
    <link href="http://skyurb.cn/2018/08/03/java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%E4%B8%80/"/>
    <id>http://skyurb.cn/2018/08/03/java基础笔记整理一/</id>
    <published>2018-08-03T09:10:57.000Z</published>
    <updated>2018-08-04T03:00:09.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Comparator和Comparable接口的区别"><a href="#Comparator和Comparable接口的区别" class="headerlink" title="Comparator和Comparable接口的区别"></a>Comparator和Comparable接口的区别</h1><p>java中，对集合对象或者数组对象排序，有两种实现方式。</p><ul><li>对象实现Comparable 接口</li><li>定义比较器，实现Comparator接口<h2 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h2>Comparable可以认为是一个内比较器，实现了Comparable接口的类有一个特点，就是这些类是可以和自己比较的，至于具体和另一个实现了Comparable接口的类如何比较，则依赖compareTo方法的实现，compareTo方法也被称为自然比较方法。如果开发者add进入一个Collection的对象想要Collections的sort方法帮你自动进行排序的话，那么这个对象必须实现Comparable接口。compareTo方法的返回值是int，有三种情况：<br>1、比较者大于被比较者（也就是compareTo方法里面的对象），那么返回正整数<br>2、比较者等于被比较者，那么返回0<br>3、比较者小于被比较者，那么返回负整数<a id="more"></a><h2 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h2>Comparator可以认为是是一个外比较器，个人认为有两种情况可以使用实现Comparator接口的方式：<br>1、一个对象不支持自己和自己比较（没有实现Comparable接口），但是又想对两个对象进行比较<br>2、一个对象实现了Comparable接口，但是开发者认为compareTo方法中的比较方式并不是自己想要的那种比较方式Comparator接口里面有一个compare方法，方法有两个参数T o1和T o2，是泛型的表示方式，分别表示待比较的两个对象，方法返回值和Comparable接口一样是int，有三种情况：<br>1、o1大于o2，返回正整数<br>2、o1等于o2，返回0<br>3、o1小于o3，返回负整数</li></ul><h1 id="在使用hashmap时为何要重写key的hashcode和equals方法"><a href="#在使用hashmap时为何要重写key的hashcode和equals方法" class="headerlink" title="在使用hashmap时为何要重写key的hashcode和equals方法"></a>在使用hashmap时为何要重写key的hashcode和equals方法</h1><p> Java中的超类Object类中定义的equals()方法是用来比较两个引用所指向的对象的内存地址是否一致<br>重点要注意的是：</p><ul><li>在java应用程序运行时，无论何时多次调用同一个对象时的hsahCode()方法，这个对象的hashCode()方法的返回值必须是相同的一个int值</li><li>如果两个对象equals()返回值为true,则他们的hashCode()也必须返回相同的int值</li><li><p>如果两个对象equals()返回值为false,则他们的hashCode()返回值也必须不同<br>我们在定义类时，我们经常会希望两个不同对象的某些属性值相同时就认为他们相同，所以我们要重写equals()方法，按照原则，我们重写了equals()方法，也要重写hashCode()方法</p><h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><p>装饰(Decorator)模式又名包装(Wrapper)模式。装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。</p><p>  装饰模式以对客户透明的方式动态地给一个对象附加上更多的责任。换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式使用原来被装饰的类的一个子类的实例，把客户端的调用委派到被装饰类。关键在于这种扩展是完全透明的。与生成子类相比，它更具有灵活性。<br>在装饰模式中的各个角色有：</p></li></ul><p>抽象构件（Component）角色：给出一个抽象接口，以规范准备接收附件责任的对象。<br>具体构件（Concrete Component）角色：定义一个要接收附加责任的类。<br>装饰（Decorator）角色：持有一个构件（Component）对象的实例，并定义一个与抽象构件接口一致的接口。<br>具体装饰（Concrete Decorator）角色：负责给构件对象“贴上”附加的责任。</p><p>   Component为组件和装饰的公共父类，它定义了子类必须实现的方法。</p><p>　　ConcreteComponent是一个具体的组件类，可以通过给它添加装饰来增加新的功能。</p><p>　　Decorator是所有装饰的公共父类，它定义了所有装饰必须实现的方法，同时，它还保存了一个对于Component的引用，以便将用户的请求转发给Component，并可能在转发请求前后执行一些附加的动作。</p><p>　　ConcreteDecorator1和ConcreteDecorator2是具体的装饰，可以使用它们来装饰具体的Component。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Comparator和Comparable接口的区别&quot;&gt;&lt;a href=&quot;#Comparator和Comparable接口的区别&quot; class=&quot;headerlink&quot; title=&quot;Comparator和Comparable接口的区别&quot;&gt;&lt;/a&gt;Comparator和Comparable接口的区别&lt;/h1&gt;&lt;p&gt;java中，对集合对象或者数组对象排序，有两种实现方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象实现Comparable 接口&lt;/li&gt;
&lt;li&gt;定义比较器，实现Comparator接口&lt;h2 id=&quot;Comparable&quot;&gt;&lt;a href=&quot;#Comparable&quot; class=&quot;headerlink&quot; title=&quot;Comparable&quot;&gt;&lt;/a&gt;Comparable&lt;/h2&gt;Comparable可以认为是一个内比较器，实现了Comparable接口的类有一个特点，就是这些类是可以和自己比较的，至于具体和另一个实现了Comparable接口的类如何比较，则依赖compareTo方法的实现，compareTo方法也被称为自然比较方法。如果开发者add进入一个Collection的对象想要Collections的sort方法帮你自动进行排序的话，那么这个对象必须实现Comparable接口。compareTo方法的返回值是int，有三种情况：&lt;br&gt;1、比较者大于被比较者（也就是compareTo方法里面的对象），那么返回正整数&lt;br&gt;2、比较者等于被比较者，那么返回0&lt;br&gt;3、比较者小于被比较者，那么返回负整数
    
    </summary>
    
      <category term="JAVA" scheme="http://skyurb.cn/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://skyurb.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>40个多线程问题总结</title>
    <link href="http://skyurb.cn/2018/07/30/40%E4%B8%AA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://skyurb.cn/2018/07/30/40个多线程问题总结/</id>
    <published>2018-07-30T12:58:03.000Z</published>
    <updated>2018-08-03T03:06:23.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程有什么用？"><a href="#多线程有什么用？" class="headerlink" title="多线程有什么用？"></a>多线程有什么用？</h1><ul><li>发挥多核CPU的优势</li></ul><p>随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4核、8核甚至16核的也都不少见，如果是单线程的程序，那么在双核CPU上就浪费了50%，在4核CPU上就浪费了75%。单核CPU上所谓的”多线程”那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快，看着像多个线程”同时”运行罢了。多核CPU上的多线程才是真正的多线程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核CPU的优势来，达到充分利用CPU的目的。</p><ul><li>防止阻塞</li></ul><p>从程序运行效率的角度来看，单核CPU不但不会发挥出多线程的优势，反而会因为在单核CPU上运行多线程导致线程上下文的切换，而降低程序整体的效率。但是单核CPU我们还是要应用多线程，就是为了防止阻塞。试想，如果单核CPU使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。<br><a id="more"></a></p><ul><li>便于建模</li></ul><p>这是另外一个没有这么明显的优点了。假设有一个大的任务A，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务A分解成几个小任务，任务B、任务C、任务D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。</p><h1 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h1><p>比较常见的一个问题了，一般就是两种：</p><ol><li>继承Thread类</li><li>实现Runnable接口</li></ol><p>至于哪个好，不用说肯定是后者好，因为实现接口的方式比继承类的方式更灵活，也能减少程序之间的耦合度，面向接口编程也是设计模式6大原则的核心。</p><h1 id="start-方法和run-方法的区别"><a href="#start-方法和run-方法的区别" class="headerlink" title="start()方法和run()方法的区别"></a>start()方法和run()方法的区别</h1><p>只有调用了start()方法，才会表现出多线程的特性，不同线程的run()方法里面的代码交替执行。如果只是调用run()方法，那么代码还是同步执行的，必须等待一个线程的run()方法里面的代码全部执行完毕之后，另外一个线程才可以执行其run()方法里面的代码。</p><h1 id="Runnable接口和Callable接口的区别"><a href="#Runnable接口和Callable接口的区别" class="headerlink" title="Runnable接口和Callable接口的区别"></a>Runnable接口和Callable接口的区别</h1><p>有点深的问题了，也看出一个Java程序员学习知识的广度。</p><p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</p><p>这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。</p><h1 id="CyclicBarrier和CountDownLatch的区别"><a href="#CyclicBarrier和CountDownLatch的区别" class="headerlink" title="CyclicBarrier和CountDownLatch的区别"></a>CyclicBarrier和CountDownLatch的区别</h1><p>两个看上去有点像的类，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：</p><ul><li><p>CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行</p></li><li><p>CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务</p></li><li>CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了</li></ul><h1 id="Volatile关键字的作用"><a href="#Volatile关键字的作用" class="headerlink" title="Volatile关键字的作用"></a>Volatile关键字的作用</h1><p>一个非常重要的问题，是每个学习、应用多线程的Java程序员都必须掌握的。理解volatile关键字的作用的前提是要理解Java内存模型，这里就不讲Java内存模型了，可以参见第31点，volatile关键字的作用主要有两个：</p><ol><li>多线程主要围绕可见性和原子性两个特性而展开，使用volatile关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到volatile变量，一定是最新的数据</li><li>代码底层执行不像我们看到的高级语言—-Java程序这么简单，它的执行是Java代码–&gt;字节码–&gt;根据字节码执行对应的C/C++代码–&gt;C/C++代码被编译成汇编语言–&gt;和硬件电路交互，现实中，为了获取更好的性能JVM可能会对指令进行重排序，多线程下可能会出现一些意想不到的问题。使用volatile则会对禁止语义重排序，当然这也一定程度上降低了代码执行效率</li></ol><p>从实践角度而言，volatile的一个重要作用就是和CAS结合，保证了原子性，详细的可以参见java.util.concurrent.atomic包下的类，比如AtomicInteger。</p><h1 id="什么是线程安全"><a href="#什么是线程安全" class="headerlink" title="什么是线程安全"></a>什么是线程安全</h1><p>又是一个理论的问题，各式各样的答案有很多，我给出一个个人认为解释地最好的：如果你的代码在多线程下执行和在单线程下执行永远都能获得一样的结果，那么你的代码就是线程安全的。</p><p>这个问题有值得一提的地方，就是线程安全也是有几个级别的：</p><ul><li>不可变</li></ul><p>像String、Integer、Long这些，都是final类型的类，任何一个线程都改变不了它们的值，要改变除非新创建一个，因此这些不可变对象不需要任何同步手段就可以直接在多线程环境下使用</p><ul><li>绝对线程安全</li></ul><p>不管运行时环境如何，调用者都不需要额外的同步措施。要做到这一点通常需要付出许多额外的代价，Java中标注自己是线程安全的类，实际上绝大多数都不是线程安全的，不过绝对线程安全的类，Java中也有，比方说CopyOnWriteArrayList、CopyOnWriteArraySet</p><ul><li>相对线程安全</li></ul><p>相对线程安全也就是我们通常意义上所说的线程安全，像Vector这种，add、remove方法都是原子操作，不会被打断，但也仅限于此，如果有个线程在遍历某个Vector、有个线程同时在add这个Vector，99%的情况下都会出现ConcurrentModificationException，也就是fail-fast机制。</p><ul><li>线程非安全</li></ul><p>这个就没什么好说的了，ArrayList、LinkedList、HashMap等都是线程非安全的类</p><h1 id="Java中如何获取到线程dump文件"><a href="#Java中如何获取到线程dump文件" class="headerlink" title="Java中如何获取到线程dump文件"></a>Java中如何获取到线程dump文件</h1><p>死循环、死锁、阻塞、页面打开慢等问题，打线程dump是最好的解决问题的途径。所谓线程dump也就是线程堆栈，获取到线程堆栈有两步：</p><ul><li>获取到线程的pid，可以通过使用jps命令，在Linux环境下还可以使用ps -ef | grep java</li><li>打印线程堆栈，可以通过使用jstack pid命令，在Linux环境下还可以使用kill -3 pid</li></ul><p>另外提一点，Thread类提供了一个getStackTrace()方法也可以用于获取线程堆栈。这是一个实例方法，因此此方法是和具体线程实例绑定的，每次获取获取到的是具体某个线程当前运行的堆栈，</p><h1 id="一个线程如果出现了运行时异常会怎么样"><a href="#一个线程如果出现了运行时异常会怎么样" class="headerlink" title="一个线程如果出现了运行时异常会怎么样"></a>一个线程如果出现了运行时异常会怎么样</h1><p>如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放</p><h1 id="如何在两个线程之间共享数据"><a href="#如何在两个线程之间共享数据" class="headerlink" title="如何在两个线程之间共享数据"></a>如何在两个线程之间共享数据</h1><p>通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的</p><h1 id="sleep方法和wait方法有什么区别"><a href="#sleep方法和wait方法有什么区别" class="headerlink" title="sleep方法和wait方法有什么区别"></a>sleep方法和wait方法有什么区别</h1><p>这个问题常问，sleep方法和wait方法都可以用来放弃CPU一定的时间，不同点在于如果线程持有某个对象的监视器，sleep方法不会放弃这个对象的监视器，wait方法会放弃这个对象的监视器</p><h1 id="生产者消费者模型的作用是什么"><a href="#生产者消费者模型的作用是什么" class="headerlink" title="生产者消费者模型的作用是什么"></a>生产者消费者模型的作用是什么</h1><p>这个问题很理论，但是很重要：</p><ul><li><p>通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用</p></li><li><p>解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约</p></li></ul><h1 id="ThreadLocal有什么用"><a href="#ThreadLocal有什么用" class="headerlink" title="ThreadLocal有什么用"></a>ThreadLocal有什么用</h1><p>简单说ThreadLocal就是一种以空间换时间的做法，在每个Thread里面维护了一个以开地址法实现的ThreadLocal.ThreadLocalMap，把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了</p><h1 id="为什么wait-方法和notify-notifyAll-方法要在同步块中被调用"><a href="#为什么wait-方法和notify-notifyAll-方法要在同步块中被调用" class="headerlink" title="为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用"></a>为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用</h1><p>这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁</p><h1 id="wait-方法和notify-notifyAll-方法在放弃对象监视器时有什么区别"><a href="#wait-方法和notify-notifyAll-方法在放弃对象监视器时有什么区别" class="headerlink" title="wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别"></a>wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别</h1><p>wait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。</p><h1 id="为什么要使用线程池"><a href="#为什么要使用线程池" class="headerlink" title="为什么要使用线程池"></a>为什么要使用线程池</h1><p>避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。</p><h1 id="怎么检测一个线程是否持有对象监视器"><a href="#怎么检测一个线程是否持有对象监视器" class="headerlink" title="怎么检测一个线程是否持有对象监视器"></a>怎么检测一个线程是否持有对象监视器</h1><p>我也是在网上看到一道多线程面试题才知道有方法可以判断某个线程是否持有对象监视器：Thread类提供了一个holdsLock(Object obj)方法，当且仅当对象obj的监视器被某条线程持有的时候才会返回true，注意这是一个static方法，这意味着“某条线程”指的是当前线程。</p><h1 id="synchronized和ReentrantLock的区别"><a href="#synchronized和ReentrantLock的区别" class="headerlink" title="synchronized和ReentrantLock的区别"></a>synchronized和ReentrantLock的区别</h1><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：</p><ul><li>ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁</li><li>ReentrantLock可以获取各种锁的信息</li><li>ReentrantLock可以灵活地实现多路通知</li></ul><p>另外，二者的锁机制其实也是不一样的。ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word，这点我不能确定。</p><h1 id="ConcurrentHashMap的并发度是什么"><a href="#ConcurrentHashMap的并发度是什么" class="headerlink" title="ConcurrentHashMap的并发度是什么"></a>ConcurrentHashMap的并发度是什么</h1><p>ConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？</p><h1 id="ReadWriteLock是什么"><a href="#ReadWriteLock是什么" class="headerlink" title="ReadWriteLock是什么"></a>ReadWriteLock是什么</h1><p>首先明确一下，不是说ReentrantLock不好，只是ReentrantLock某些时候有局限。如果使用ReentrantLock，可能本身是为了防止线程A在写数据、线程B在读数据造成的数据不一致，但这样，如果线程C在读数据、线程D也在读数据，读数据是不会改变数据的，没有必要加锁，但是还是加锁了，降低了程序的性能。</p><p>因为这个，才诞生了读写锁ReadWriteLock。ReadWriteLock是一个读写锁接口，ReentrantReadWriteLock是ReadWriteLock接口的一个具体实现，实现了读写的分离，读锁是共享的，写锁是独占的，读和读之间不会互斥，读和写、写和读、写和写之间才会互斥，提升了读写的性能。</p><h1 id="FutureTask是什么"><a href="#FutureTask是什么" class="headerlink" title="FutureTask是什么"></a>FutureTask是什么</h1><p>这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。</p><h1 id="Linux环境下如何查找哪个线程使用CPU最长"><a href="#Linux环境下如何查找哪个线程使用CPU最长" class="headerlink" title="Linux环境下如何查找哪个线程使用CPU最长"></a>Linux环境下如何查找哪个线程使用CPU最长</h1><p>这是一个比较偏实践的问题，这种问题我觉得挺有意义的。可以这么做：</p><p>（1）获取项目的pid，jps或者ps -ef | grep java，这个前面有讲过</p><p>（2）top -H -p pid，顺序不能改变</p><p>这样就可以打印出当前的项目，每条线程占用CPU时间的百分比。注意这里打出的是LWP，也就是操作系统原生线程的线程号，我笔记本山没有部署Linux环境下的Java工程，因此没有办法截图演示，网友朋友们如果公司是使用Linux环境部署项目的话，可以尝试一下。</p><p>使用”top -H -p pid”+”jps pid”可以很容易地找到某条占用CPU高的线程的线程堆栈，从而定位占用CPU高的原因，一般是因为不当的代码操作导致了死循环。</p><p>最后提一点，”top -H -p pid”打出来的LWP是十进制的，”jps pid”打出来的本地线程号是十六进制的，转换一下，就能定位到占用CPU高的线程的当前线程堆栈了。</p><h1 id="Java编程写一个会导致死锁的程序"><a href="#Java编程写一个会导致死锁的程序" class="headerlink" title="Java编程写一个会导致死锁的程序"></a>Java编程写一个会导致死锁的程序</h1><p>第一次看到这个题目，觉得这是一个非常好的问题。很多人都知道死锁是怎么一回事儿：线程A和线程B相互等待对方持有的锁导致程序无限死循环下去。当然也仅限于此了，问一下怎么写一个死锁的程序就不知道了，这种情况说白了就是不懂什么是死锁，懂一个理论就完事儿了，实践中碰到死锁的问题基本上是看不出来的。</p><p>真正理解什么是死锁，这个问题其实不难，几个步骤：</p><p>（1）两个线程里面分别持有两个Object对象：lock1和lock2。这两个lock作为同步代码块的锁；</p><p>（2）线程1的run()方法中同步代码块先获取lock1的对象锁，Thread.sleep(xxx)，时间不需要太多，50毫秒差不多了，然后接着获取lock2的对象锁。这么做主要是为了防止线程1启动一下子就连续获得了lock1和lock2两个对象的对象锁</p><p>（3）线程2的run)(方法中同步代码块先获取lock2的对象锁，接着获取lock1的对象锁，当然这时lock1的对象锁已经被线程1锁持有，线程2肯定是要等待线程1释放lock1的对象锁的</p><p>这样，线程1″睡觉”睡完，线程2已经获取了lock2的对象锁了，线程1此时尝试获取lock2的对象锁，便被阻塞，此时一个死锁就形成了。代码就不写了，占的篇幅有点多，Java多线程7：死锁这篇文章里面有，就是上面步骤的代码实现。</p><h1 id="怎么唤醒一个阻塞的线程"><a href="#怎么唤醒一个阻塞的线程" class="headerlink" title="怎么唤醒一个阻塞的线程"></a>怎么唤醒一个阻塞的线程</h1><p>如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。</p><h1 id="不可变对象对多线程有什么帮助"><a href="#不可变对象对多线程有什么帮助" class="headerlink" title="不可变对象对多线程有什么帮助"></a>不可变对象对多线程有什么帮助</h1><p>前面有提到过的一个问题，不可变对象保证了对象的内存可见性，对不可变对象的读取不需要进行额外的同步手段，提升了代码执行效率。</p><h1 id="什么是多线程的上下文切换"><a href="#什么是多线程的上下文切换" class="headerlink" title="什么是多线程的上下文切换"></a>什么是多线程的上下文切换</h1><p>多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。</p><h1 id="如果你提交任务时，线程池队列已满，这时会发生什么"><a href="#如果你提交任务时，线程池队列已满，这时会发生什么" class="headerlink" title="如果你提交任务时，线程池队列已满，这时会发生什么"></a>如果你提交任务时，线程池队列已满，这时会发生什么</h1><p>如果你使用的LinkedBlockingQueue，也就是无界队列的话，没关系，继续添加任务到阻塞队列中等待执行，因为LinkedBlockingQueue可以近乎认为是一个无穷大的队列，可以无限存放任务；如果你使用的是有界队列比方说ArrayBlockingQueue的话，任务首先会被添加到ArrayBlockingQueue中，ArrayBlockingQueue满了，则会使用拒绝策略RejectedExecutionHandler处理满了的任务，默认是AbortPolicy。</p><h1 id="Java中用到的线程调度算法是什么"><a href="#Java中用到的线程调度算法是什么" class="headerlink" title="Java中用到的线程调度算法是什么"></a>Java中用到的线程调度算法是什么</h1><p>抢占式。一个线程用完CPU之后，操作系统会根据线程优先级、线程饥饿情况等数据算出一个总的优先级并分配下一个时间片给某个线程执行。</p><h1 id="Thread-sleep-0-的作用是什么"><a href="#Thread-sleep-0-的作用是什么" class="headerlink" title="Thread.sleep(0)的作用是什么"></a>Thread.sleep(0)的作用是什么</h1><p>这个问题和上面那个问题是相关的，我就连在一起了。由于Java采用抢占式的线程调度算法，因此可能会出现某条线程常常获取到CPU控制权的情况，为了让某些优先级比较低的线程也能获取到CPU控制权，可以使用Thread.sleep(0)手动触发一次操作系统分配时间片的操作，这也是平衡CPU控制权的一种操作。</p><h1 id="什么是自旋"><a href="#什么是自旋" class="headerlink" title="什么是自旋"></a>什么是自旋</h1><p>很多synchronized里面的代码只是一些很简单的代码，执行时间非常快，此时等待的线程都加锁可能是一种不太值得的操作，因为线程阻塞涉及到用户态和内核态切换的问题。既然synchronized里面的代码执行地非常快，不妨让等待锁的线程不要被阻塞，而是在synchronized的边界做忙循环，这就是自旋。如果做了多次忙循环发现还没有获得锁，再阻塞，这样可能是一种更好的策略。</p><h1 id="什么是Java内存模型"><a href="#什么是Java内存模型" class="headerlink" title="什么是Java内存模型"></a>什么是Java内存模型</h1><p>Java内存模型定义了一种多线程访问Java内存的规范。Java内存模型要完整讲不是这里几句话能说清楚的，我简单总结一下Java内存模型的几部分内容：</p><ul><li><p>Java内存模型将内存分为了主内存和工作内存。类的状态，也就是类之间共享的变量，是存储在主内存中的，每次Java线程用到这些主内存中的变量的时候，会读一次主内存中的变量，并让这些内存在自己的工作内存中有一份拷贝，运行自己线程代码的时候，用到这些变量，操作的都是自己工作内存中的那一份。在线程代码执行完毕之后，会将最新的值更新到主内存中去</p></li><li><p>定义了几个原子操作，用于操作主内存和工作内存中的变量</p></li><li><p>定义了volatile变量的使用规则</p></li></ul><p>（4）happens-before，即先行发生原则，定义了操作A必然先行发生于操作B的一些规则，比如在同一个线程内控制流前面的代码一定先行发生于控制流后面的代码、一个释放锁unlock的动作一定先行发生于后面对于同一个锁进行锁定lock的动作等等，只要符合这些规则，则不需要额外做同步措施，如果某段代码不符合所有的happens-before规则，则这段代码一定是线程非安全的</p><h1 id="什么是CAS"><a href="#什么是CAS" class="headerlink" title="什么是CAS"></a>什么是CAS</h1><p>CAS，全称为Compare and Set，即比较-设置。假设有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，才会将内存值修改为B并返回true，否则什么都不做并返回false。当然CAS一定要volatile变量配合，这样才能保证每次拿到的变量是主内存中最新的那个值，否则旧的预期值A对某条线程来说，永远是一个不会变的值A，只要某次CAS操作失败，永远都不可能成功。</p><h1 id="什么是乐观锁和悲观锁"><a href="#什么是乐观锁和悲观锁" class="headerlink" title="什么是乐观锁和悲观锁"></a>什么是乐观锁和悲观锁</h1><ul><li>乐观锁：就像它的名字一样，对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较-设置这两个动作作为一个原子操作尝试去修改内存中的变量，如果失败则表示发生冲突，那么就应该有相应的重试逻辑。</li><li>悲观锁：还是像它的名字一样，对于并发间操作产生的线程安全问题持悲观状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，不管三七二十一，直接上了锁就操作资源了。</li></ul><h1 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h1><p>简单说一下AQS，AQS全称为AbstractQueuedSychronizer，翻译过来应该是抽象队列同步器。</p><p>如果说java.util.concurrent的基础是CAS的话，那么AQS就是整个Java并发包的核心了，ReentrantLock、CountDownLatch、Semaphore等等都用到了它。AQS实际上以双向队列的形式连接所有的Entry，比方说ReentrantLock，所有等待的线程都被放在一个Entry中并连成双向队列，前面一个线程使用ReentrantLock好了，则双向队列实际上的第一个Entry开始运行。</p><p>AQS定义了对双向队列所有的操作，而只开放了tryLock和tryRelease方法给开发者使用，开发者可以根据自己的实现重写tryLock和tryRelease方法，以实现自己的并发功能。</p><h1 id="单例模式的线程安全性"><a href="#单例模式的线程安全性" class="headerlink" title="单例模式的线程安全性"></a>单例模式的线程安全性</h1><p>老生常谈的问题了，首先要说的是单例模式的线程安全意味着：某个类的实例在多线程环境下只会被创建一次出来。单例模式有很多种的写法，我总结一下：</p><ul><li>饿汉式单例模式的写法：线程安全</li><li>懒汉式单例模式的写法：非线程安全</li><li>双检锁单例模式的写法：线程安全</li></ul><h1 id="Semaphore有什么作用"><a href="#Semaphore有什么作用" class="headerlink" title="Semaphore有什么作用"></a>Semaphore有什么作用</h1><p>Semaphore就是一个信号量，它的作用是限制某段代码块的并发数。Semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。由此可以看出如果Semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。</p><h1 id="Hashtable的size-方法中明明只有一条语句”return-count”，为什么还要做同步？"><a href="#Hashtable的size-方法中明明只有一条语句”return-count”，为什么还要做同步？" class="headerlink" title="Hashtable的size()方法中明明只有一条语句”return count”，为什么还要做同步？"></a>Hashtable的size()方法中明明只有一条语句”return count”，为什么还要做同步？</h1><p>这是我之前的一个困惑，不知道大家有没有想过这个问题。某个方法中如果有多条语句，并且都在操作同一个类变量，那么在多线程环境下不加锁，势必会引发线程安全问题，这很好理解，但是size()方法明明只有一条语句，为什么还要加锁？</p><p>关于这个问题，在慢慢地工作、学习中，有了理解，主要原因有两点：</p><ul><li>同一时间只能有一条线程执行固定类的同步方法，但是对于类的非同步方法，可以多条线程同时访问。所以，这样就有问题了，可能线程A在执行Hashtable的put方法添加数据，线程B则可以正常调用size()方法读取Hashtable中当前元素的个数，那读取到的值可能不是最新的，可能线程A添加了完了数据，但是没有对size++，线程B就已经读取size了，那么对于线程B来说读取到的size一定是不准确的。而给size()方法加了同步之后，意味着线程B调用size()方法只有在线程A调用put方法完毕之后才可以调用，这样就保证了线程安全性</li></ul><ul><li>CPU执行代码，执行的不是Java代码，这点很关键，一定得记住。Java代码最终是被翻译成汇编代码执行的，汇编代码才是真正可以和硬件电路交互的代码。即使你看到Java代码只有一行，甚至你看到Java代码编译之后生成的字节码也只有一行，也不意味着对于底层来说这句语句的操作只有一个。一句”return count”假设被翻译成了三句汇编语句执行，完全可能执行完第一句，线程就切换了。</li></ul><h1 id="线程类的构造方法、静态块是被哪个线程调用的"><a href="#线程类的构造方法、静态块是被哪个线程调用的" class="headerlink" title="线程类的构造方法、静态块是被哪个线程调用的"></a>线程类的构造方法、静态块是被哪个线程调用的</h1><p>这是一个非常刁钻和狡猾的问题。请记住：线程类的构造方法、静态块是被new这个线程类所在的线程所调用的，而run方法里面的代码才是被线程自身所调用的。</p><p>如果说上面的说法让你感到困惑，那么我举个例子，假设Thread2中new了Thread1，main函数中new了Thread2，那么：</p><p>（1）Thread2的构造方法、静态块是main线程调用的，Thread2的run()方法是Thread2自己调用的</p><p>（2）Thread1的构造方法、静态块是Thread2调用的，Thread1的run()方法是Thread1自己调用的</p><h1 id="同步方法和同步块，哪个是更好的选择"><a href="#同步方法和同步块，哪个是更好的选择" class="headerlink" title="同步方法和同步块，哪个是更好的选择"></a>同步方法和同步块，哪个是更好的选择</h1><p>同步块，这意味着同步块之外的代码是异步执行的，这比同步整个方法更提升代码的效率。请知道一条原则：同步的范围越少越好。</p><p>借着这一条，我额外提一点，虽说同步的范围越少越好，但是在Java虚拟机中还是存在着一种叫做锁粗化的优化方法，这种方法就是把同步范围变大。这是有用的，比方说StringBuffer，它是一个线程安全的类，自然最常用的append()方法是一个同步方法，我们写代码的时候会反复append字符串，这意味着要进行反复的加锁-&gt;解锁，这对性能不利，因为这意味着Java虚拟机在这条线程上要反复地在内核态和用户态之间进行切换，因此Java虚拟机会将多次append方法调用的代码进行一个锁粗化的操作，将多次的append的操作扩展到append方法的头尾，变成一个大的同步块，这样就减少了加锁–&gt;解锁的次数，有效地提升了代码执行的效率。</p><h1 id="高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？"><a href="#高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？" class="headerlink" title="高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？"></a>高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？</h1><p>（1）高并发、任务执行时间短的业务，线程池线程数可以设置为CPU核数+1，减少线程上下文的切换</p><p>（2）并发不高、任务执行时间长的业务要区分开看：</p><p>a）假如是业务时间长集中在IO操作上，也就是IO密集型的任务，因为IO操作并不占用CPU，所以不要让所有的CPU闲下来，可以加大线程池中的线程数目，让CPU处理更多的业务</p><p>b）假如是业务时间长集中在计算操作上，也就是计算密集型任务，这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换</p><p>（3）并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（2）。最后，业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。</p><hr><p><em>转载自： </em><a href="https://www.cnblogs.com/xrq730/p/5060921.html" target="_blank" rel="noopener">https://www.cnblogs.com/xrq730/p/5060921.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多线程有什么用？&quot;&gt;&lt;a href=&quot;#多线程有什么用？&quot; class=&quot;headerlink&quot; title=&quot;多线程有什么用？&quot;&gt;&lt;/a&gt;多线程有什么用？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;发挥多核CPU的优势&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4核、8核甚至16核的也都不少见，如果是单线程的程序，那么在双核CPU上就浪费了50%，在4核CPU上就浪费了75%。单核CPU上所谓的”多线程”那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快，看着像多个线程”同时”运行罢了。多核CPU上的多线程才是真正的多线程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核CPU的优势来，达到充分利用CPU的目的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防止阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从程序运行效率的角度来看，单核CPU不但不会发挥出多线程的优势，反而会因为在单核CPU上运行多线程导致线程上下文的切换，而降低程序整体的效率。但是单核CPU我们还是要应用多线程，就是为了防止阻塞。试想，如果单核CPU使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java基础练习题</title>
    <link href="http://skyurb.cn/2018/07/25/java%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>http://skyurb.cn/2018/07/25/java基础练习题/</id>
    <published>2018-07-25T08:01:31.000Z</published>
    <updated>2018-07-25T08:05:41.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-字符串排序"><a href="#1-字符串排序" class="headerlink" title="1.字符串排序"></a>1.字符串排序</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//给定一字符串，进行排序</span></span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"hello"</span>;</span><br><span class="line">        <span class="built_in">char</span>[] chars = <span class="built_in">str</span>.toCharArray();</span><br><span class="line">        <span class="built_in">char</span> temp=<span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt;i ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chars[i]&lt;chars[j])&#123;</span><br><span class="line">                   temp=chars[i];</span><br><span class="line">                   chars[i]=chars[j];</span><br><span class="line">                   chars[j]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方法，利用工具类</span></span><br><span class="line">        Arrays.<span class="built_in">sort</span>(chars);</span><br><span class="line">        System.out.<span class="built_in">println</span>(chars);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="字符串，将其首字母转为大写，后续字母转为小写输出。"><a href="#字符串，将其首字母转为大写，后续字母转为小写输出。" class="headerlink" title="字符串，将其首字母转为大写，后续字母转为小写输出。"></a>字符串，将其首字母转为大写，后续字母转为小写输出。</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//给定任意字符串，将其首字母转为大写，后续字母转为小写输出。</span></span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">str</span>=<span class="string">"helLOBaby"</span>;</span><br><span class="line">        <span class="keyword">String</span> s1 = <span class="built_in">str</span>.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase();</span><br><span class="line">        <span class="keyword">String</span> s2 = <span class="built_in">str</span>.substring(<span class="number">1</span>).toLowerCase();</span><br><span class="line">        System.out.<span class="built_in">println</span>(s1+s2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="彩票问题"><a href="#彩票问题" class="headerlink" title="彩票问题"></a>彩票问题</h1><blockquote><p>有一个股票价格序列共10天。每天的价格是{4，2，1，3，5，7，5，7，8，8}。规定：3日移动平均价格大于当天价格则买入。请问第一次出现买入信号是第几天，总共出现几次买入信号。<br>提示：3日移动平均是指当前以及以后两天的价格的平均值。</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int arry[]=&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        int days=<span class="number">0</span>;</span><br><span class="line">        int count=<span class="number">0</span>;</span><br><span class="line">        for (int i = <span class="number">0</span>; i &lt; arry.length<span class="number">-2</span>; i++) &#123;</span><br><span class="line">            double avg=(arry[i]+arry[i+<span class="number">1</span>]+arry[i+<span class="number">2</span>])/<span class="number">3.0</span>;</span><br><span class="line">            if (arry[i]&lt;avg)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                if (count==<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"天"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"一共出现五次"</span>+count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="用蒙特卡洛模拟求出圆周率"><a href="#用蒙特卡洛模拟求出圆周率" class="headerlink" title="用蒙特卡洛模拟求出圆周率"></a>用蒙特卡洛模拟求出圆周率</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> MontePI(<span class="built_in">int</span> n) &#123;</span><br><span class="line">       <span class="keyword">double</span> <span class="literal">PI</span>;</span><br><span class="line">       <span class="keyword">double</span> x, y;</span><br><span class="line">       <span class="built_in">int</span> i, sum;</span><br><span class="line">       sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">           x = Math.<span class="built_in">random</span>();</span><br><span class="line">           y = Math.<span class="built_in">random</span>();</span><br><span class="line">           <span class="keyword">if</span> ((x * x + y * y) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">               sum++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="literal">PI</span> = <span class="number">4.0</span> * sum / n;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">PI</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">       <span class="built_in">int</span> n;</span><br><span class="line">       <span class="keyword">double</span> <span class="literal">PI</span>;</span><br><span class="line">       System.out.<span class="built_in">println</span>(<span class="string">"蒙特卡洛概率算法计算圆周率:"</span>);</span><br><span class="line">       Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       System.out.<span class="built_in">println</span>(<span class="string">"输入点的数量："</span>);</span><br><span class="line">       n = input.nextInt();</span><br><span class="line">       <span class="literal">PI</span> = MontePI(n);</span><br><span class="line">       System.out.<span class="built_in">println</span>(<span class="string">"PI="</span>+<span class="literal">PI</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="求出字符不同字母的个数"><a href="#求出字符不同字母的个数" class="headerlink" title="求出字符不同字母的个数"></a>求出字符不同字母的个数</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">       <span class="comment">//求出字符不同字母的个数</span></span><br><span class="line">       <span class="keyword">String</span> <span class="built_in">str</span>=<span class="string">""</span>;</span><br><span class="line">       <span class="keyword">String</span> str3=<span class="string">"hello"</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str3.length(); i++) &#123;</span><br><span class="line">           <span class="keyword">String</span> ch=str3.substring(i,i+<span class="number">1</span>);</span><br><span class="line">           <span class="keyword">if</span> (!<span class="built_in">str</span>.contains(ch))&#123;</span><br><span class="line">               <span class="built_in">str</span>+=ch;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.<span class="built_in">println</span>(<span class="built_in">str</span>.length());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="判断字符串是否对称"><a href="#判断字符串是否对称" class="headerlink" title="判断字符串是否对称"></a>判断字符串是否对称</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">       <span class="comment">//判断字符串是否对称</span></span><br><span class="line">       <span class="built_in">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">       Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       System.out.<span class="built_in">println</span>(<span class="string">"请输入一个字符串"</span>);</span><br><span class="line">       <span class="keyword">String</span> <span class="built_in">str</span> = s.next();</span><br><span class="line">       <span class="built_in">char</span> ch[] = <span class="built_in">str</span>.toCharArray();</span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ch.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (ch[i] != ch[ch.length - i - <span class="number">1</span>]) &#123;</span><br><span class="line">               flag = <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"yes"</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"no"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="创建一个可以无限存放数组的容器"><a href="#创建一个可以无限存放数组的容器" class="headerlink" title="创建一个可以无限存放数组的容器"></a>创建一个可以无限存放数组的容器</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class MyArryList &#123;</span><br><span class="line">    <span class="comment">//创建一个可以无限存放数组的容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span>=<span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] init=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="built_in">size</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从集合中取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">get</span>(<span class="built_in">int</span> index)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"下标不能小于0"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> init[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> num)&#123;</span><br><span class="line">       <span class="keyword">if</span> (index&gt;<span class="built_in">size</span>*<span class="number">0.75</span>)&#123;</span><br><span class="line">           <span class="built_in">size</span>*=<span class="number">2</span>;</span><br><span class="line">           <span class="comment">//创建两倍大小数组</span></span><br><span class="line">           <span class="built_in">int</span> []newArry=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="built_in">size</span>];</span><br><span class="line">           <span class="comment">//遍历老数组,复制到新数组中</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; init.length; i++) &#123;</span><br><span class="line">               newArry[i]=init[i];</span><br><span class="line">           &#125;</span><br><span class="line">           init=newArry;</span><br><span class="line">       &#125;</span><br><span class="line">       init[index]=num;</span><br><span class="line">       index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        MyArryList myArryList = <span class="keyword">new</span> MyArryList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;<span class="number">200</span> ; i++) &#123;</span><br><span class="line">            myArryList.<span class="built_in">add</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(myArryList.<span class="built_in">get</span>(<span class="number">18</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="链表的实现原理"><a href="#链表的实现原理" class="headerlink" title="链表的实现原理"></a>链表的实现原理</h1><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存放数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">date</span>;</span><br><span class="line">    <span class="comment">//指向下一个节点个引用</span></span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> getDate() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">date</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setDate(<span class="keyword">int</span> <span class="keyword">date</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">date</span> = <span class="keyword">date</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node getNext() &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setNext(Node next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class MyLinkList &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">Node</span> <span class="title">head</span>=new <span class="keyword">Node</span><span class="title">();</span></span><br><span class="line"><span class="title">    private</span> <span class="keyword">Node</span> <span class="title">tail</span>=head;</span><br><span class="line">    //定义存放数据方法</span><br><span class="line">    public void add(int num)&#123;</span><br><span class="line">        //创建一个节点，将数据填充到节点，将尾部节点指向新创建的节点</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">node</span>=new <span class="keyword">Node</span><span class="title">();</span></span><br><span class="line"><span class="title">        //将数据填充节点</span></span><br><span class="line"><span class="title">        node</span>.setDate(num);</span><br><span class="line">        //然后将</span><br><span class="line">       // <span class="keyword">Node</span> <span class="title">next</span>=tail.getNext();</span><br><span class="line">       tail.setNext(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">        tail</span>=<span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">    &#125;</span></span><br><span class="line"><span class="title">    //定义get</span>方法</span><br><span class="line">    public int get(int index)&#123;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">target</span>=head;</span><br><span class="line">        for (int i = <span class="number">0</span>; i <span class="tag">&lt; index+1; i++) &#123;</span></span><br><span class="line"><span class="tag">            target=target.getNext();</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">        return target.getDate();</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="tag">        MyLinkList myLinkList = new MyLinkList();</span></span><br><span class="line"><span class="tag">        for (int i = 0; i &lt; 100; i++) &#123;</span></span><br><span class="line"><span class="tag">            myLinkList.add(i);</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">        System.out.println(myLinkList.get(5));</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-字符串排序&quot;&gt;&lt;a href=&quot;#1-字符串排序&quot; class=&quot;headerlink&quot; title=&quot;1.字符串排序&quot;&gt;&lt;/a&gt;1.字符串排序&lt;/h1&gt;&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//给定一字符串，进行排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;char&lt;/span&gt;[] chars = &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;.toCharArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;char&lt;/span&gt; temp=&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; chars.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt;i ; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (chars[i]&amp;lt;chars[j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   temp=chars[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   chars[i]=chars[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   chars[j]=temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//第二种方法，利用工具类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Arrays.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(chars);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(chars);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://skyurb.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="http://skyurb.cn/2018/07/23/git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://skyurb.cn/2018/07/23/git学习/</id>
    <published>2018-07-23T13:42:08.000Z</published>
    <updated>2018-08-06T13:59:07.980Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/c3a6dd62gy1ftnh7wdvmtj20cn05ajre.jpg" alt=""></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li></ul><ul><li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li></ul><ul><li>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。<a id="more"></a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行。<br>Git 各平台安装包下载地址为：<a href="http://git-scm.com/downloads" target="_blank" rel="noopener">http://git-scm.com/downloads</a></p><p>liunx（Debian/Ubuntu）下下载：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install libcurl4-gnutls-<span class="built_in">dev</span> libexpat1-<span class="built_in">dev</span> gettext \</span><br><span class="line">libz-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p><p>liunx（Centos/RedHat）<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> git</span><br><span class="line">yum -y <span class="keyword">install</span> git-core</span><br></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>配置个人的用户名称和电子邮件地址：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"yourname"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email youremail@runoob.com</span><br></pre></td></tr></table></figure></li><li><p>查看配置信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--list</span><br></pre></td></tr></table></figure></li><li><p>检查版本</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p><ul><li><p>首先创建一个目录（比如在e盘创建一个目录gittest）</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> e:</span><br><span class="line"><span class="built_in">mkdir</span> gittest</span><br></pre></td></tr></table></figure></li><li><p>通过命令 git init 把这个目录变成git可以管理的仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> gittest</span><br><span class="line">git init</span><br></pre></td></tr></table></figure></li></ul><p>这时候你当前gittest目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了.</p><h3 id="把文件添加到版本库中"><a href="#把文件添加到版本库中" class="headerlink" title="把文件添加到版本库中"></a>把文件添加到版本库中</h3><p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道<br>-使用命令 git add read.txt添加到暂存区里面去<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="built_in">read</span>.txt</span><br><span class="line">git <span class="built_in">add</span> <span class="built_in">read</span>.txt</span><br></pre></td></tr></table></figure></p><p>没有任何提示，说明已经添加成功了<br>-用命令 git commit告诉Git，把文件提交到仓库<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">commit</span> -m <span class="string">'read.txt提交'</span></span><br><span class="line">[<span class="keyword">master</span> (root-<span class="keyword">commit</span>) ba2c0c8] read.txt提交</span><br><span class="line"><span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">0</span> insertions(+), <span class="number">0</span> deletions(-)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> read.txt</span><br></pre></td></tr></table></figure></p><p>git commit后面跟的是提交的注释<br>我们可以通过命令git status来查看是否还有文件未提交<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">//结果</span><br><span class="line">On branch <span class="literal">master</span></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></p><p>说明没有任何文件未提交，但是我现在继续来改下read.txt内容，比如我在下面添加一行hello内容，继续使用git status来查看下结果<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vi</span> <span class="keyword">read</span>.txt</span><br><span class="line">//在<span class="keyword">vi</span>编辑器插入hello</span><br><span class="line">git status</span><br><span class="line">//结果如下</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commi<span class="variable">t:</span></span><br><span class="line">(use <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will <span class="keyword">be</span> committed)</span><br><span class="line">(use <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard <span class="keyword">changes</span> in working directory)</span><br><span class="line">modified:   <span class="keyword">read</span>.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> <span class="keyword">changes</span> added <span class="keyword">to</span> commit (use <span class="string">"git add"</span> <span class="built_in">and</span>/<span class="built_in">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure></p><p>上面的命令告诉我们 reae.txt文件已被修改，但是未被提交的修改。<br>想看下read.txt文件到底改了什么内容可以用git diff read.txt<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   git diff read.txt</span><br><span class="line">   <span class="comment">//结果如下</span></span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> read<span class="selector-class">.txt</span>.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory.</span><br><span class="line">diff --git a/read<span class="selector-class">.txt</span> b/read.txt</span><br><span class="line">index e69de29.<span class="selector-class">.ce01362</span> <span class="number">100644</span></span><br><span class="line">--- a/read.txt</span><br><span class="line">+++ b/read.txt</span><br><span class="line">@@ -<span class="number">0</span>,<span class="number">0</span> +<span class="number">1</span> @@</span><br><span class="line">+hello</span><br></pre></td></tr></table></figure></p><p>可以看到，read.txt文件内容从没有改成一行添加了一行hello内容<br>知道了对read.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add  第二步是：git commit)<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   git commit -m '<span class="keyword">read</span>.txt提交增加hello'</span><br><span class="line">//结果</span><br><span class="line">[<span class="keyword">master</span> <span class="title">f4dd0e7</span>] <span class="keyword">read</span>.txt提交增加hello</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure></p><ul><li>版本回退<br>现在我继续对readme.txt文件进行修改，再增加一行world<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   git commit -m '<span class="keyword">read</span>.txt提交增加world'</span><br><span class="line">//结果</span><br><span class="line">[<span class="keyword">master</span> <span class="title">f4dd0e7</span>] <span class="keyword">read</span>.txt提交增加world</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure></li></ul><p>现在我已经对read.txt文件做了三次修改了，那么我现在想查看下历史记录，可以使用命令 git log ：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   git log</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">commit <span class="number">64</span>a95f6216fa491fcd0517764c18168c5db0725e (HEAD -&gt; master)</span><br><span class="line"><span class="symbol">Author:</span> skyurb <span class="params">&lt;<span class="number">2864814961</span>@qq.com&gt;</span></span><br><span class="line"><span class="symbol">Date:</span>   Sat Aug <span class="number">4</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">26</span> <span class="number">2018</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">   read.txt提交增加world</span><br><span class="line"></span><br><span class="line">commit f4dd0e7e782c60948526fafbf1283c57c435b95d</span><br><span class="line"><span class="symbol">Author:</span> skyurb <span class="params">&lt;<span class="number">2864814961</span>@qq.com&gt;</span></span><br><span class="line"><span class="symbol">Date:</span>   Sat Aug <span class="number">4</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">34</span> <span class="number">2018</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">   read.txt提交增加hello</span><br><span class="line"></span><br><span class="line">commit ba2c0c83e1930b0a16125d10ebed7fee2ce6ba02</span><br><span class="line"><span class="symbol">Author:</span> skyurb <span class="params">&lt;<span class="number">2864814961</span>@qq.com&gt;</span></span><br><span class="line"><span class="symbol">Date:</span>   Sat Aug <span class="number">4</span> <span class="number">11</span>:<span class="number">19</span>:<span class="number">45</span> <span class="number">2018</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">   read.txt提交</span><br></pre></td></tr></table></figure></p><p>git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交记录，如果嫌上面显示的信息太多的话，我们可以使用命令 <code>git log –pretty=oneline</code><br>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：<code>git reset  --hard HEAD^</code> 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：<code>git reset  --hard HEAD~100</code> 即可<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   git <span class="keyword">reset</span> - -hard <span class="keyword">HEAD</span>^</span><br><span class="line">   //结果</span><br><span class="line">   <span class="keyword">HEAD</span> <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> f4dd0e7 read.txt提交增加hello</span><br><span class="line">cat read.txt</span><br><span class="line">   //结果</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></p><p>我们再用cat查看就只剩hello了，增加的world内容我们看不到了，但是现在我想回退到最新的版本，如：有world的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：<code>git reset  --hard</code> 版本号 ，<br>但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加world内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog  演示如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">reflog</span></span><br><span class="line">   <span class="comment">//结果</span></span><br><span class="line"><span class="selector-tag">f4dd0e7</span> (HEAD -&gt; master) <span class="selector-tag">HEAD</span><span class="variable">@&#123;0&#125;</span>: <span class="selector-tag">reset</span>: <span class="selector-tag">moving</span> <span class="selector-tag">to</span> <span class="selector-tag">HEAD</span>^</span><br><span class="line"><span class="selector-tag">64a95f6</span> <span class="selector-tag">HEAD</span><span class="variable">@&#123;1&#125;</span>: <span class="selector-tag">commit</span>: <span class="selector-tag">read</span><span class="selector-class">.txt</span>提交增加<span class="selector-tag">world</span></span><br><span class="line"><span class="selector-tag">f4dd0e7</span> (HEAD -&gt; master) <span class="selector-tag">HEAD</span><span class="variable">@&#123;2&#125;</span>: <span class="selector-tag">commit</span>: <span class="selector-tag">read</span><span class="selector-class">.txt</span>提交增加<span class="selector-tag">hello</span></span><br><span class="line"><span class="selector-tag">ba2c0c8</span> <span class="selector-tag">HEAD</span><span class="variable">@&#123;3&#125;</span>: <span class="selector-tag">commit</span> (initial): <span class="selector-tag">read</span><span class="selector-class">.txt</span>提交</span><br></pre></td></tr></table></figure></p><p>通过上面的显示我们可以知道，增加内容world的版本号是 64a95f6.我们现在可以命令git reset  –hard 64a95f6来恢复了<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span>  <span class="comment">--hard 64a95f6</span></span><br><span class="line"><span class="keyword">HEAD</span> <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> <span class="number">64</span>a95f6 read.txt提交增加world</span><br></pre></td></tr></table></figure></p><p>这时，又恢复到原来有world的版本</p><h3 id="理解工作区与暂存区的区别"><a href="#理解工作区与暂存区的区别" class="headerlink" title="理解工作区与暂存区的区别"></a>理解工作区与暂存区的区别</h3><ul><li>工作区：就是你在电脑上看到的目录，比如目录下gittest里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</li><li>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。<br>我们前面说过使用Git提交文件到版本库有两步：</li></ul><ol><li>是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</li><li>使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。<h3 id="Git撤销修改和删除文件操作"><a href="#Git撤销修改和删除文件操作" class="headerlink" title="Git撤销修改和删除文件操作"></a>Git撤销修改和删除文件操作</h3>如果我又在read.txt文件里面加一行 good morning，但在未提交之前发现提交的内容有误，所以我要马上恢复以前的版本，现在有两种方法：</li></ol><ul><li><p>如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。</p></li><li><p>我可以按以前的方法直接恢复到上一个版本。使用 git reset  –hard HEAD^<br>但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   git status</span><br><span class="line">//结果</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">        modified:   read.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>可以发现，Git会告诉你，git checkout  – file 可以丢弃工作区的修改<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- read.txt</span><br><span class="line">cat read.txt</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure></p><p>发现后面的内容就没有了，命令 git checkout – read.txt 意思就是，把read.txt文件在工作区做的修改全部撤销，这里有2种情况</p><ul><li><p>read.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。</p></li><li><p>另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。<br><strong>注意：命令git checkout – readme.txt 中的 – 很重要，如果没有 – 的话，那么命令变成创建分支了。</strong></p></li><li>删除文件<br>假如我现在版本库gittest目录添加一个文件book.txt,然后提交<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    git status</span><br><span class="line">//结果</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add/rm &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">        deleted:    book.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm book.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉。<br>只要没有commit之前，如果我想在版本库中恢复此文件。可以使用如下命令 <code>git checkout  -- book.txt</code><br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">-- book.txt</span></span><br></pre></td></tr></table></figure></p><p>这样被删掉的文件就能恢复了</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ol><li>先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置。<br>创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：<br><code>ssh-keygen  -t rsa –C “youremail@example.com”,</code> id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人</li><li>登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。点击 Add Key，你就应该可以看到已经添加的key</li></ol><h3 id="如何添加远程库"><a href="#如何添加远程库" class="headerlink" title="如何添加远程库"></a>如何添加远程库</h3><p>现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作</p><ul><li>首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库</li><li>在Repository name填入你的仓库名，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库</li><li>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/skyurb/gittest.git</span><br><span class="line">    //然后执行</span><br><span class="line">    git push -<span class="keyword">u</span> origin master</span><br><span class="line">    //结果</span><br><span class="line">Enumerating object<span class="variable">s:</span> <span class="number">11</span>, done.</span><br><span class="line">Counting object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">11</span>/<span class="number">11</span>), done.</span><br><span class="line">Delta compression using <span class="keyword">up</span> <span class="keyword">to</span> <span class="number">4</span> threads.</span><br><span class="line">Compressing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">5</span>/<span class="number">5</span>), done.</span><br><span class="line">Writing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">11</span>/<span class="number">11</span>), <span class="number">934</span> bytes | <span class="number">934.00</span> KiB/s, done.</span><br><span class="line">Total <span class="number">11</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To http<span class="variable">s:</span>//github.<span class="keyword">com</span>/skyurb/gittest.git</span><br><span class="line"> * [<span class="keyword">new</span> branch]      master -&gt; master</span><br><span class="line">Branch <span class="string">'master'</span> <span class="keyword">set</span> <span class="keyword">up</span> <span class="keyword">to</span> track remote branch <span class="string">'master'</span> from <span class="string">'origin'</span>.</span><br></pre></td></tr></table></figure></li></ul><p>把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。<br>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了<br>从现在起，只要本地作了提交，就可以通过如下命令：</p><p><code>git push origin master</code><br>把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了</p><h3 id="如何从远程库克隆"><a href="#如何从远程库克隆" class="headerlink" title="如何从远程库克隆"></a>如何从远程库克隆</h3><p>假如远程库有新的内容了，我想克隆到本地来 如何克隆<br>使用命令git clone克隆一个本地库<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="string">https:</span><span class="comment">//github.com/skyurb/gittest</span></span><br><span class="line">Cloning into <span class="string">'gitskills'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">3</span>, done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">3</span></span><br><span class="line">Receiving <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done</span><br></pre></td></tr></table></figure></p><p>就可以再本地看了</p><hr><p><em>参考自廖雪峰官网 ：</em><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/c3a6dd62gy1ftnh7wdvmtj20cn05ajre.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。
    
    </summary>
    
      <category term="Git" scheme="http://skyurb.cn/categories/Git/"/>
    
    
      <category term="git" scheme="http://skyurb.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>用HashMap实现简单的倒排索引</title>
    <link href="http://skyurb.cn/2018/07/20/%E7%94%A8HashMap%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    <id>http://skyurb.cn/2018/07/20/用HashMap实现简单的倒排索引/</id>
    <published>2018-07-20T12:46:35.000Z</published>
    <updated>2018-07-21T08:36:07.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>搜索引擎通常检索的场景是：给定几个关键词，找出包含关键词的文档<br>用HashMap实现倒排索引的设想：</p><ul><li>举例 有三本书，每本书中都会有几个关键字，通过关键字来检索到出现在那几本书中</li></ul><ul><li>实行：创建两个hashmap，一个用来存放原数据，一个用来存放新索引，以原数据的value分割后的单词做新索引的key，以原数据的value对应的key做索引value，添加到新索引中<a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2></li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">       <span class="comment">//存储数据map</span></span><br><span class="line">       <span class="keyword">HashMap</span> date = <span class="keyword">new</span> <span class="keyword">HashMap</span>();</span><br><span class="line">       date.put(<span class="string">"book1"</span>,<span class="string">"hello world"</span>);</span><br><span class="line">       date.put(<span class="string">"book2"</span>,<span class="string">"hello beautiful world"</span>);</span><br><span class="line">       date.put(<span class="string">"book3"</span>,<span class="string">"hello beautiful new world"</span>);</span><br><span class="line">       <span class="comment">//索引的map</span></span><br><span class="line">       <span class="keyword">HashMap</span> index = <span class="keyword">new</span> <span class="keyword">HashMap</span>();</span><br><span class="line">       Set keySet = date.keySet();</span><br><span class="line">       <span class="comment">//遍历date的key</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">Object</span> word:keySet) &#123;</span><br><span class="line">           <span class="keyword">String</span> keyString = (<span class="keyword">String</span>) word;</span><br><span class="line">           <span class="comment">//通过key获得value</span></span><br><span class="line">           <span class="keyword">String</span> count = (<span class="keyword">String</span>) date.<span class="built_in">get</span>(keyString);</span><br><span class="line">           <span class="comment">//将字符串分割成数组</span></span><br><span class="line">           <span class="keyword">String</span>[] words = count.<span class="built_in">split</span>(<span class="string">" "</span>);</span><br><span class="line">           <span class="comment">//遍历数组，获取关键字</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;words.length ; i++) &#123;</span><br><span class="line">               <span class="comment">//判断索引中是否存在关键字，如果不存在添加，存在将追加</span></span><br><span class="line">               <span class="keyword">if</span> (!index.containsKey(words[i]))&#123;</span><br><span class="line">                   <span class="comment">//创建一个arrylist用来添加或后续追加索引值</span></span><br><span class="line">                   ArrayList books = <span class="keyword">new</span> ArrayList();</span><br><span class="line">                   <span class="comment">//将date的key存入</span></span><br><span class="line">                   books.<span class="built_in">add</span>(keyString);</span><br><span class="line">                   <span class="comment">//将新组建的键值对存入索引</span></span><br><span class="line">                   index.put(words[i],books);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">//如果存在关键字,通过关键字获取value，</span></span><br><span class="line">                   List books = (List) index.<span class="built_in">get</span>(words[i]);</span><br><span class="line">                   <span class="comment">//将date的key追加到value中</span></span><br><span class="line">                   books.<span class="built_in">add</span>(keyString);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//输出新map</span></span><br><span class="line">       System.out.<span class="built_in">println</span>(index);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">beautiful=[book2, </span><span class="keyword">book3], </span>new=[<span class="keyword">book3], </span>world=[<span class="keyword">book2, </span><span class="keyword">book1, </span><span class="keyword">book3], </span>hello=[<span class="keyword">book2, </span><span class="keyword">book1, </span><span class="keyword">book3]&#125;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">Process </span>finished with exit <span class="meta">code</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;搜索引擎通常检索的场景是：给定几个关键词，找出包含关键词的文档&lt;br&gt;用HashMap实现倒排索引的设想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;举例 有三本书，每本书中都会有几个关键字，通过关键字来检索到出现在那几本书中&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;实行：创建两个hashmap，一个用来存放原数据，一个用来存放新索引，以原数据的value分割后的单词做新索引的key，以原数据的value对应的key做索引value，添加到新索引中
    
    </summary>
    
    
      <category term="java" scheme="http://skyurb.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java基础笔记整理</title>
    <link href="http://skyurb.cn/2018/07/19/java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <id>http://skyurb.cn/2018/07/19/java基础笔记整理/</id>
    <published>2018-07-19T11:04:08.000Z</published>
    <updated>2018-07-27T06:42:25.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java基础易错知识整理"><a href="#java基础易错知识整理" class="headerlink" title="java基础易错知识整理"></a>java基础易错知识整理</h1><h2 id="数组初始值"><a href="#数组初始值" class="headerlink" title="数组初始值"></a>数组初始值</h2><p>下面代码输出结果是0<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">int</span>[] arry=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">             Sysout.out.println(arr[i]);</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure></p><p>–int类型：0</p><p>–short类型：(short）0</p><p>–byte类型：(byte）0</p><p>–long类型：0L</p><p>–doulbe类型：0.0d</p><p>–float类型：0.0f</p><p>–char类型：\u0000（空格字符）</p><p>–boolean类型：false<br>–引用类型的数组在创建之后，赋默认值null，初始化后，int型默认值为0<br><a id="more"></a></p><h2 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h2><p>抛出异常有三种形式，一是throw,一个throws，还有一种系统自动抛异常。下面它们之间的异同</p><ol><li><p>当程序语句出现一些逻辑错误、主义错误或类型转换错误时，系统会自动抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>, b =<span class="number">0</span>; </span><br><span class="line">    System.out.println(<span class="number">5</span>/b); </span><br><span class="line">    <span class="comment">//function(); </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>throw是语句抛出一个异常，一般是在代码块的内部，当程序出现某种逻辑错误时由程序员主动抛出某种特定类型的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    String s = <span class="string">"abc"</span>; </span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">"abc"</span>)) &#123; </span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      System.out.println(s); </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>throws是方法可能抛出异常的声明。(用在声明方法时，表示该方法可能要抛出异常)</p><p>public void function() throws Exception{……}</p></li></ol><p>当某个方法可能会抛出某种异常时用于throws 声明可能抛出的异常，然后交给上层调用它的方法程序处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> class <span class="title">testThrows</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> <span class="keyword">throws</span> NumberFormatException</span>&#123; </span><br><span class="line">String s = <span class="string">"abc"</span>; </span><br><span class="line">System.out.println(Double.parseDouble(s)); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">function(); </span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123; </span><br><span class="line">System.err.println(<span class="string">"非数据类型不能强制类型转换。"</span>); </span><br><span class="line"><span class="comment">//e.printStackTrace(); </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>throw与throws的比较<br>1、throws出现在方法函数头；而throw出现在函数体。<br>2、throws表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某种异常对象。<br>3、两者都是消极处理异常的方式（这里的消极并不是说这种方式不好），只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。<br><em>参考自 ：</em><a href="https://blog.csdn.net/hjfcgt123/article/details/53349275" target="_blank" rel="noopener">https://blog.csdn.net/hjfcgt123/article/details/53349275</a></p><h2 id="堆溢出和栈溢出"><a href="#堆溢出和栈溢出" class="headerlink" title="堆溢出和栈溢出"></a>堆溢出和栈溢出</h2><ul><li>栈溢出(StackOverflowError)</li><li>堆溢出(OutOfMemoryError:java heap space)<br>先了解一下java中的堆和栈，JAVA在程序运行时，在内存中划分5片空间进行数据的存储。分别是：<br>1：寄存器。<br>2：本地方法区。<br>3：方法区。<br>4：栈。<br>5：堆。</li></ul><p>基本数据类型、局部变量都是存放在栈内存中的，用完就消失。<br>new创建的实例化对象及数组，是存放在堆内存中的，用完之后靠垃圾回收机制不定期自动消除。举个例子<br>ArrayList list = new ArrayList();</p><p>实际上，在创建完上面的一个对象后，在JVM中，会把new出来的对象存放在堆内存中，</p><p>同时，在方法栈中存放着对象的引用关系。</p><ul><li>如果想要堆溢出，比较简单，可以循环创建对象或大的对象；死循环创建字符串对象或字符串拼接。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">      ArrayList list=<span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          list.add(<span class="keyword">new</span> Heap());</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>如果想要栈溢出，可以递归调用方法，这样随着栈深度的增加，JVM 维持着一条长长的方法调用轨迹，直到内存不够分配，产生栈溢出。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> Stack().test();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">      test();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="String和StringBuffer，StringBuilder区别"><a href="#String和StringBuffer，StringBuilder区别" class="headerlink" title="String和StringBuffer，StringBuilder区别"></a>String和StringBuffer，StringBuilder区别</h2><p>这三个类之间的区别主要是在两个方面，即运行速度和线程安全这两方面</p><ol><li>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String<br>String最慢的原因：<br><strong><br>　　**</strong>String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，即String对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。**<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">              String str=<span class="string">"abc"</span>;</span><br><span class="line">              System.out.println(str);</span><br><span class="line">              str=str+<span class="string">"de"</span>;</span><br><span class="line">              System.out.println(str);</span><br></pre></td></tr></table></figure>如果运行这段代码会发现先输出“abc”，然后又输出“abcde”，好像是str这个对象被更改了，其实，这只是一种假象罢了，JVM对于这几行代码是这样处理的，首先创建一个String对象str，并把“abc”赋值给str，然后在第三行中，其实JVM又创建了一个新的对象也名为str，然后再把原来的str的值和“de”加起来再赋值给新的str，而原来的str就会被JVM的垃圾回收机制（GC）给回收掉了，所以，str实际上并没有被更改，也就是前面说的String对象一旦创建之后就不可更改了。所以，Java中对String对象进行的操作实际上是一个不断创建新的对象并且将旧的对象回收的一个过程，所以执行速度很慢。</li></ol><p>而StringBuilder和StringBuffer的对象是变量，对变量进行操作就是直接对该对象进行更改，而不进行创建和回收的操作，所以速度要比String快很多<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">               String str=<span class="string">"abc"</span>+<span class="string">"de"</span>;</span><br><span class="line">               StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder().append(<span class="string">"abc"</span>).append(<span class="string">"de"</span>);</span><br><span class="line">               System.out.println(str);</span><br><span class="line">               System.out.println(stringBuilder.toString());</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><br>这样输出结果也是“abcde”和“abcde”，但是String的速度却比StringBuilder的反应速度要快很多</p><ol start="2"><li>在线程安全上，StringBuilder是线程不安全的，而StringBuffer是线程安全的<blockquote><p>如果一个StringBuffer对象在字符串缓冲区被多个线程使用时，StringBuffer中很多方法可以带有synchronized关键字，所以可以保证线程是安全的，但StringBuilder的方法则没有该关键字，所以不能保证线程安全，有可能会出现一些错误的操作。所以如果要进行的操作是多线程的，那么就要使用StringBuffer，但是在单线程的情况下，还是建议使用速度比较快的StringBuilder。<br><em>来自：</em><a href="https://www.cnblogs.com/su-feng/p/6659064.html" target="_blank" rel="noopener">https://www.cnblogs.com/su-feng/p/6659064.html</a></p></blockquote><h2 id="Java中-号与equals-方法的区别"><a href="#Java中-号与equals-方法的区别" class="headerlink" title="Java中==号与equals()方法的区别"></a>Java中==号与equals()方法的区别</h2></li></ol><ul><li>首先==号在比较基本数据类型时比较的是值，而用==号比较两个对象时比较的是两个对象的地址值：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">               <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">               String str1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">               String str2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">               System.out.println(x == y); <span class="comment">// 输出true</span></span><br><span class="line">               System.out.println(str1 == str2); <span class="comment">// 输出false </span></span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>Equals是object中的方法，用于判断两个对象是否想等。默认的equals是== ,不过子类可以重写父类的方法，加以改变。典型如string integer等类都重写了equals方法<h2 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h2></li><li>一个是Array(动态数组)的数据结构，一个是Link(链表)的数据结构，此外，它们两个都是对List接口的实现。<br>前者是数组队列，相当于动态数组；后者为双向链表结构，也可当作堆栈、队列、双端队列</li><li>当随机访问List时（get和set操作），ArrayList比LinkedList的效率更高，因为LinkedList是线性的数据存储方式，所以需要移动指针从前往后依次查找</li><li>当对数据进行增加和删除的操作时(add和remove操作)，LinkedList比ArrayList的效率更高，因为ArrayList是数组，所以在其中进行增删操作时，会对操作点之后所有数据的下标索引造成影响，需要进行数据的移动</li><li>从利用效率来看，ArrayList自由性较低，因为它需要手动的设置固定大小的容量，但是它的使用比较方便，只需要创建，然后添加数据，通过调用下标进行使用；而LinkedList自由性较高，能够动态的随数据量的变化而变化，但是它不便于使用。</li><li>ArrayList主要控件开销在于需要在List列表预留一定空间；而LinkList主要控件开销在于需要存储结点信息以及结点指针信息。<br><em>来自于：</em><a href="https://www.cnblogs.com/Amedeo/p/7885146.html" target="_blank" rel="noopener">https://www.cnblogs.com/Amedeo/p/7885146.html</a><h2 id="运行时异常和受检时异常区别"><a href="#运行时异常和受检时异常区别" class="headerlink" title="运行时异常和受检时异常区别"></a>运行时异常和受检时异常区别</h2>最本质的区别是RuntimeException是运行时才会发生的异常, 而受检查异常是编译时异常,编译器会分析哪些异常会在执行一个方法或者构造函数的时候抛出。 </li><li>运行时异常（RuntimeException）也称作未检测的异常（unchecked exception），这表示这种异常不需要编译器来检测。RuntimeException是所有可以在运行时抛出的异常的父类。一个方法除要捕获异常外，如果它执行的时候可能会抛出RuntimeException的子类，那么它就不需要用throw语句来声明抛出的异常</li><li>受检查异常（checked exception）都是编译器在编译时进行校验的，通过throws语句或者try{}cathch{} 语句块来处理检测异常。编译器会分析哪些异常会在执行一个方法或者构造函数的时候抛出。<h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2>………</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java基础易错知识整理&quot;&gt;&lt;a href=&quot;#java基础易错知识整理&quot; class=&quot;headerlink&quot; title=&quot;java基础易错知识整理&quot;&gt;&lt;/a&gt;java基础易错知识整理&lt;/h1&gt;&lt;h2 id=&quot;数组初始值&quot;&gt;&lt;a href=&quot;#数组初始值&quot; class=&quot;headerlink&quot; title=&quot;数组初始值&quot;&gt;&lt;/a&gt;数组初始值&lt;/h2&gt;&lt;p&gt;下面代码输出结果是0&lt;br&gt; &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arry=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             Sysout.out.println(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;–int类型：0&lt;/p&gt;
&lt;p&gt;–short类型：(short）0&lt;/p&gt;
&lt;p&gt;–byte类型：(byte）0&lt;/p&gt;
&lt;p&gt;–long类型：0L&lt;/p&gt;
&lt;p&gt;–doulbe类型：0.0d&lt;/p&gt;
&lt;p&gt;–float类型：0.0f&lt;/p&gt;
&lt;p&gt;–char类型：\u0000（空格字符）&lt;/p&gt;
&lt;p&gt;–boolean类型：false&lt;br&gt;–引用类型的数组在创建之后，赋默认值null，初始化后，int型默认值为0&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://skyurb.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>字符编码</title>
    <link href="http://skyurb.cn/2018/07/18/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    <id>http://skyurb.cn/2018/07/18/字符编码/</id>
    <published>2018-07-18T01:29:13.000Z</published>
    <updated>2018-07-21T08:36:07.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用字符编码分类"><a href="#常用字符编码分类" class="headerlink" title="常用字符编码分类"></a>常用字符编码分类</h2><ul><li>字符集编码：就是用数字来表示各种字符</li><li>asc码：美国国家标准码<br>一个字节表示一个字符</li><li>UTF：unicode世界范围的统一编码<br>用四个字节表示一个字符<br>UTF-8:优化以后的utf码。让英文语系的编码量明显减少，有保证了世界范围的通用</li><li>GBK：汉字内码扩展规范</li><li>Big5：在台湾、香港与澳门地区，使用的是繁体中文字符集<a id="more"></a><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li></ul><p>1、编码界最初只有ASCII码，只用了1byte中的7bit（0~127）；</p><p>2、欧洲人发现128个不够了，就把1byte中没用的最高位给用上了，出现了Latin系列（ISO-8859系列）编码；</p><p>3、中国人民通过对ASCII编码进行中文扩充改造，产生了GB2312编码，可以表示6000多个常用汉字；</p><p>4、汉字实在太多了，还有繁体、各种字符呀，于是加以扩展，有了GBK；</p><p>5、GBK还不够，少数民族的字还木有呀，于是GBK又扩展为GB18030；</p><p>6、每个国家、语言都有自己的编码，彼此无法交流，迫切需要大一统局面的出现；</p><p>7、Unicode诞生，可以容纳全世界的任何文字。Unicode分为UCS-2和UCS-4，分别是2字节和4字节，实际2字节就够用了；</p><p>8、为了Unicode能实际应用（存储、传输），制定了Unicode的编码方式，即UTF，有UTF-8、UTF-16、UTF-32，其中UTF-8应用广泛；</p><p>9、UTF-16、UTF-32均是多字节传输，存在字节顺序的问题，于是有了大头还是小头的概念，为了解决这个问题，引入了BOM。UTF-8是单字节传输，不存在这个问题，也就不需要BOM，但可以有，仅用来表明编码格式；</p><p>10、要从“环境/终端/文本/程序”等不同层次去理解编码，并尝试解决遇到的问题；</p><p><em>在线编码转换工具</em><a href="http://tool.chinaz.com/Tools/Unicode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/Tools/Unicode.aspx</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用字符编码分类&quot;&gt;&lt;a href=&quot;#常用字符编码分类&quot; class=&quot;headerlink&quot; title=&quot;常用字符编码分类&quot;&gt;&lt;/a&gt;常用字符编码分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;字符集编码：就是用数字来表示各种字符&lt;/li&gt;
&lt;li&gt;asc码：美国国家标准码&lt;br&gt;一个字节表示一个字符&lt;/li&gt;
&lt;li&gt;UTF：unicode世界范围的统一编码&lt;br&gt;用四个字节表示一个字符&lt;br&gt;UTF-8:优化以后的utf码。让英文语系的编码量明显减少，有保证了世界范围的通用&lt;/li&gt;
&lt;li&gt;GBK：汉字内码扩展规范&lt;/li&gt;
&lt;li&gt;Big5：在台湾、香港与澳门地区，使用的是繁体中文字符集
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>内部类</title>
    <link href="http://skyurb.cn/2018/07/16/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://skyurb.cn/2018/07/16/内部类/</id>
    <published>2018-07-16T01:42:07.000Z</published>
    <updated>2018-07-21T08:36:07.194Z</updated>
    
    <content type="html"><![CDATA[<p>#定义：在一个类的内部又定义了一个类，这就是内部类。#<br>举例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String outerName;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> outerAge;</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">      <span class="keyword">private</span> String innerName;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span> innerAge;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>内部类是一个编译时概念，编译后外部类及其内部类会生成两个独立的class文件： OuterClass.class和OuterClass$InnerClass.class<br>内部类可以直接访问外部类的元素，但是外部类不可以直接访问内部类的元素<br><a id="more"></a></p><h2 id="表现形式"><a href="#表现形式" class="headerlink" title="表现形式"></a>表现形式</h2><ol><li>静态内部类<blockquote><p>关键字static可以修饰成员变量、方法、代码块，其实它还可以修饰内部类，使用static修饰的内部类我们称之为静态内部类。静态内部类与非静态内部类之间存在一个最大的区别，我们知道非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围内，但是静态内部类却没有。没有这个引用就意味着：</p></blockquote></li></ol><p>静态内部类的创建是不需要依赖于外围类，可以直接创建<br>静态内部类不可以使用任何外围类的非static成员变量和方法，而内部类则都可以</p><ol start="2"><li>成员内部类<blockquote><p>成员内部类也是最普通的内部类，它是外部类的一个成员，所以他是可以无限制的访问外围类的所有成员属性和方法，尽管是private的，但是外围类要访问内部类的成员属性和方法则需要通过内部类实例来访问。</p></blockquote></li></ol><p>在成员内部类中要注意两点：</p><p>成员内部类中不能存在任何static的变量和方法<br>成员内部类是依附于外围类的，所以只有先创建了外围类才能够创建内部类</p><ol start="3"><li>局部内部类<blockquote><p>有这样一种内部类，它是嵌套在方法和作用于内的，对于这个类的使用主要是应用与解决比较复杂的问题，想创建一个类来辅助我们的解决方案，到那时又不希望这个类是公共可用的，所以就产生了局部内部类，局部内部类和成员内部类一样被编译，只是它的作用域发生了改变，它只能在该方法和属性中被使用，出了该方法和属性就会失效。</p></blockquote></li><li>匿名内部类<blockquote><p>匿名内部类其实就是一个没有名字的方法内部类，所以它符合方法内部类的所有约束，初次之外，还有一些地方需要注意：</p></blockquote></li></ol><p>匿名内部类是没有访问修饰符的。<br>匿名内部类必须继承一个抽象类或者实现一个接口<br>匿名内部类中不能存在任何静态成员或方法<br>匿名内部类是没有构造方法的，因为它没有类名。<br>一般使用匿名内部类的场景是，要继承或实现的接口只有一个抽象方法，比如添加一个监听器</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><em>为什么要使用内部类？在《Think in java》中有这样一句话：使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。</em><br>⒈ 内部类对象可以访问创建它的对象的实现，包括私有数据；<br>⒉ 内部类不为同一包的其他类所见，具有很好的封装性；<br>⒊ 使用内部类可以很方便的编写事件驱动程序；<br>⒋ 匿名内部类可以方便的定义运行时回调；<br>5.内部类可以方便的定义</p><hr><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><p>匿名内部类的创建方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类构造器（参数列表）|实现接口（）  </span><br><span class="line">   &#123;  </span><br><span class="line">   <span class="comment">//匿名内部类的类体部分  </span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>使用匿名内部类我们必须要继承一个父类或者实现一个接口,这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anonymous</span> </span>&#123;</span><br><span class="line">  <span class="comment">//测试匿名内部类</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Inner inner = <span class="keyword">new</span> Inner() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="string">"tom"</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      System.out.println(inner.getName());</span><br></pre></td></tr></table></figure></p><p>  在使用匿名内部类的过程中，我们需要注意如下几点：</p><ul><li>使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。</li></ul><ul><li>匿名内部类中是不能定义构造函数的。</li></ul><ul><li>匿名内部类中不能存在任何的静态成员变量和静态方法。</li></ul><ul><li>匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。</li></ul><ul><li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#定义：在一个类的内部又定义了一个类，这就是内部类。#&lt;br&gt;举例：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OuterClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String outerName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; outerAge;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InnerClass&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String innerName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; innerAge;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;内部类是一个编译时概念，编译后外部类及其内部类会生成两个独立的class文件： OuterClass.class和OuterClass$InnerClass.class&lt;br&gt;内部类可以直接访问外部类的元素，但是外部类不可以直接访问内部类的元素&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://skyurb.cn/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://skyurb.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java单例模式</title>
    <link href="http://skyurb.cn/2018/07/14/java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://skyurb.cn/2018/07/14/java单例模式/</id>
    <published>2018-07-14T07:09:33.000Z</published>
    <updated>2018-07-21T08:36:07.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式概述"><a href="#单例模式概述" class="headerlink" title="单例模式概述"></a>单例模式概述</h1><blockquote><p>单例模式，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例</p></blockquote><blockquote><p>Java中单例模式定义：“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”</p></blockquote><blockquote><p>单例模式三要素：</p></blockquote><ul><li>私有的构造方法；</li><li>指向自己实例的私有静态引用；</li><li>以自己实例为返回值的静态的公有方法。</li></ul><a id="more"></a><h1 id="单例模式实现"><a href="#单例模式实现" class="headerlink" title="单例模式实现"></a>单例模式实现</h1><blockquote><p>单例模式可以分为懒汉式和饿汉式：</p><blockquote><p>懒汉式单例模式：在类加载时不初始化。<br>饿汉式单例模式：在类加载时就完成了初始化，所以类加载比较慢，但获取对象的速度快。</p></blockquote></blockquote><h3 id="第一种（懒汉，线程不安全）"><a href="#第一种（懒汉，线程不安全）" class="headerlink" title="第一种（懒汉，线程不安全）"></a>第一种（懒汉，线程不安全）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo1 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">           instance = <span class="keyword">new</span> SingletonDemo1();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="第二种（懒汉，线程安全）"><a href="#第二种（懒汉，线程安全）" class="headerlink" title="第二种（懒汉，线程安全）"></a>第二种（懒汉，线程安全）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonDemo2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">           instance = <span class="keyword">new</span> SingletonDemo2();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="第三种（饿汉）"><a href="#第三种（饿汉）" class="headerlink" title="第三种（饿汉）"></a>第三种（饿汉）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance = <span class="keyword">new</span> SingletonDemo3();</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo3 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式优缺点"><a href="#单例模式优缺点" class="headerlink" title="单例模式优缺点"></a>单例模式优缺点</h1><blockquote><p>优点：</p></blockquote><ol><li>在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就 防止其它对象对自己的实例化，确保所有的对象都访问一个实例</li><li>单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。</li><li>提供了对唯一实例的受控访问。</li><li>由于在系统内存中只存在一个对象，因此可以 节约系统资源，当 需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。</li><li>允许可变数目的实例。 </li><li>避免对共享资源的多重占用。</li></ol><blockquote><p>缺点</p></blockquote><ol><li>不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。 </li><li>由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。 </li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。 </li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1>由于单例模式具有以上优点，并且形式上比较简单，所以是日常开发中用的比较多的一种设计模式，其核心在于为整个系统提供一个唯一的实例，其应用场景包括但不仅限于以下几种：</li></ol><ul><li>有状态的工具类对象；</li><li>频繁访问数据库或文件的对象；<br>我的cnds：<a href="https://blog.csdn.net/qq_38384971" title="cnds" target="_blank" rel="noopener">https://blog.csdn.net/qq_38384971</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单例模式概述&quot;&gt;&lt;a href=&quot;#单例模式概述&quot; class=&quot;headerlink&quot; title=&quot;单例模式概述&quot;&gt;&lt;/a&gt;单例模式概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;单例模式，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Java中单例模式定义：“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;单例模式三要素：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;私有的构造方法；&lt;/li&gt;
&lt;li&gt;指向自己实例的私有静态引用；&lt;/li&gt;
&lt;li&gt;以自己实例为返回值的静态的公有方法。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://skyurb.cn/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://skyurb.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>text</title>
    <link href="http://skyurb.cn/2018/07/14/text/"/>
    <id>http://skyurb.cn/2018/07/14/text/</id>
    <published>2018-07-14T03:50:13.000Z</published>
    <updated>2018-07-21T08:36:07.190Z</updated>
    
    <content type="html"><![CDATA[<p>下载图片<br> <a href="/download/zz.jpg">点击加载</a><br>下载文档<br><a href="/download/java基础.docx">点击下载</a></p><p><a href="/download/Think In Java 4.pdf">Think In Java在线</a></p><h1 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h1><h2 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h2><p>###测试3</p><p>####测试4</p><h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><pre><code>public static void main(String[] args) {            MyLinkList myLinkList = new MyLinkList();            for (int i = 0; i &lt; 100; i++) {                myLinkList.add(i);            }</code></pre><p><code>public static void main(String[] args) {         MyLinkList myLinkList = new MyLinkList();         for (int i = 0; i &lt; 100; i++) {         myLinkList.add(i);ll          }</code> </p><blockquote><p>测试yLinkList.add(i);</p></blockquote><h2 id="序列测试"><a href="#序列测试" class="headerlink" title="序列测试"></a>序列测试</h2><ul><li>测试</li><li>cs</li><li>测试</li></ul><ol><li>测试</li><li>测试<br><strong>测试</strong><br><em>测试</em><h2 id="分页测试"><a href="#分页测试" class="headerlink" title="分页测试"></a>分页测试</h2><a id="more"></a><h2 id="代码类型测试"><a href="#代码类型测试" class="headerlink" title="代码类型测试"></a>代码类型测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">               MyLinkList myLinkList = <span class="keyword">new</span> MyLinkList();</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                   myLinkList.add(i);</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printme</span><span class="params">( str )</span>:</span></span><br><span class="line">   <span class="string">"打印任何传入的字符串"</span></span><br><span class="line">   <span class="keyword">print</span> str;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">printme(<span class="string">"我要调用用户自定义函数!"</span>);</span><br><span class="line">printme(<span class="string">"再次调用同一函数"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w=<span class="built_in">window</span>.innerWidth</span><br><span class="line">|| <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">|| <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h=<span class="built_in">window</span>.innerHeight</span><br><span class="line">|| <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">|| <span class="built_in">document</span>.body.clientHeight;</span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>[] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bpn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"prenext"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"pre"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/js/js_obj_regexp.asp"</span> <span class="attr">title</span>=<span class="string">"JavaScript RegExp 对象"</span>&gt;</span>JS 正则表达式<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/js/js_window_screen.asp"</span> <span class="attr">title</span>=<span class="string">"JavaScript Window Screen"</span>&gt;</span>JS Screen<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>[lang:] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><hr><p>2018/7/14 16:55:56 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下载图片&lt;br&gt; &lt;a href=&quot;/download/zz.jpg&quot;&gt;点击加载&lt;/a&gt;&lt;br&gt;下载文档&lt;br&gt;&lt;a href=&quot;/download/java基础.docx&quot;&gt;点击下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/download/Think In Java 4.pdf&quot;&gt;Think In Java在线&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;测试1&quot;&gt;&lt;a href=&quot;#测试1&quot; class=&quot;headerlink&quot; title=&quot;测试1&quot;&gt;&lt;/a&gt;测试1&lt;/h1&gt;&lt;h2 id=&quot;测试2&quot;&gt;&lt;a href=&quot;#测试2&quot; class=&quot;headerlink&quot; title=&quot;测试2&quot;&gt;&lt;/a&gt;测试2&lt;/h2&gt;&lt;p&gt;###测试3&lt;/p&gt;
&lt;p&gt;####测试4&lt;/p&gt;
&lt;h2 id=&quot;代码测试&quot;&gt;&lt;a href=&quot;#代码测试&quot; class=&quot;headerlink&quot; title=&quot;代码测试&quot;&gt;&lt;/a&gt;代码测试&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;public static void main(String[] args) {
            MyLinkList myLinkList = new MyLinkList();
            for (int i = 0; i &amp;lt; 100; i++) {
                myLinkList.add(i);
            }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;public static void main(String[] args) {
         MyLinkList myLinkList = new MyLinkList();
         for (int i = 0; i &amp;lt; 100; i++) {
         myLinkList.add(i);ll
          }&lt;/code&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;测试yLinkList.add(i);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;序列测试&quot;&gt;&lt;a href=&quot;#序列测试&quot; class=&quot;headerlink&quot; title=&quot;序列测试&quot;&gt;&lt;/a&gt;序列测试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;cs&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;测试&lt;br&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;br&gt;&lt;em&gt;测试&lt;/em&gt;&lt;h2 id=&quot;分页测试&quot;&gt;&lt;a href=&quot;#分页测试&quot; class=&quot;headerlink&quot; title=&quot;分页测试&quot;&gt;&lt;/a&gt;分页测试&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>链表的java实现</title>
    <link href="http://skyurb.cn/2018/07/13/%E9%93%BE%E8%A1%A8%E7%9A%84java%E5%AE%9E%E7%8E%B0/"/>
    <id>http://skyurb.cn/2018/07/13/链表的java实现/</id>
    <published>2018-07-13T12:37:07.000Z</published>
    <updated>2018-07-21T08:36:07.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建一个节点和一个对象"><a href="#创建一个节点和一个对象" class="headerlink" title="创建一个节点和一个对象"></a>创建一个节点和一个对象</h2><blockquote><p>节点包含两个属性：数据，和指向连接<br>对象实现添加和查询方法</p></blockquote><a id="more"></a><p>##创建节点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">         <span class="keyword">private</span> <span class="keyword">int</span> date;</span><br><span class="line">        </span><br><span class="line">         <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> date;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(<span class="keyword">int</span> date)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.date = date;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> next;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node next)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.next = next;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>##创建对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkList</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> Node head=<span class="keyword">new</span> Node();</span><br><span class="line">            <span class="keyword">private</span> Node tail=head;</span><br><span class="line">            <span class="comment">//定义存放数据方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">                <span class="comment">//创建一个节点，将数据填充到节点，将尾部节点指向新创建的节点</span></span><br><span class="line">                Node node=<span class="keyword">new</span> Node();</span><br><span class="line">                <span class="comment">//将数据填充节点</span></span><br><span class="line">                node.setDate(num);</span><br><span class="line">            tail.setNext(node);</span><br><span class="line">                tail=node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//定义get方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">                Node target=head;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index+<span class="number">1</span>; i++) &#123;</span><br><span class="line">                    target=target.getNext();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> target.getDate();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                MyLinkList myLinkList = <span class="keyword">new</span> MyLinkList();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    myLinkList.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(myLinkList.get(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建一个节点和一个对象&quot;&gt;&lt;a href=&quot;#创建一个节点和一个对象&quot; class=&quot;headerlink&quot; title=&quot;创建一个节点和一个对象&quot;&gt;&lt;/a&gt;创建一个节点和一个对象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;节点包含两个属性：数据，和指向连接&lt;br&gt;对象实现添加和查询方法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://skyurb.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="java" scheme="http://skyurb.cn/tags/java/"/>
    
      <category term="链表" scheme="http://skyurb.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
